
Practica 9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800200  00000ff2  00001086  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ff2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b5  0080023a  0080023a  000010c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001abb  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee3  00000000  00000000  00002d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c52  00000000  00000000  00003c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  00004858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ce  00000000  00000000  00004d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001365  00000000  00000000  00005536  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  0000689b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	fe c2       	rjmp	.+1532   	; 0x652 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	6d c5       	rjmp	.+2778   	; 0xb40 <__vector_25>
  66:	00 00       	nop
  68:	4b c6       	rjmp	.+3222   	; 0xd00 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	8f c5       	rjmp	.+2846   	; 0xbb0 <__vector_36>
  92:	00 00       	nop
  94:	67 c6       	rjmp	.+3278   	; 0xd64 <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a9 c5       	rjmp	.+2898   	; 0xc20 <__vector_51>
  ce:	00 00       	nop
  d0:	7b c6       	rjmp	.+3318   	; 0xdc8 <__vector_52>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	db c5       	rjmp	.+2998   	; 0xc90 <__vector_54>
  da:	00 00       	nop
  dc:	a7 c6       	rjmp	.+3406   	; 0xe2c <__vector_55>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ef       	ldi	r30, 0xF2	; 242
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 33       	cpi	r26, 0x3A	; 58
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 3e       	cpi	r26, 0xEF	; 239
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	41 d2       	rcall	.+1154   	; 0x5a2 <main>
 120:	66 c7       	rjmp	.+3788   	; 0xfee <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <Clock_Ini>:
		}
	}
	return 0; /* <-- no se llega aquí */
}

void Clock_Ini(uint64_t millis){
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	28 97       	sbiw	r28, 0x08	; 8
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	42 2e       	mov	r4, r18
 15a:	53 2e       	mov	r5, r19
 15c:	64 2e       	mov	r6, r20
 15e:	75 2e       	mov	r7, r21
 160:	86 2e       	mov	r8, r22
 162:	97 2e       	mov	r9, r23
 164:	88 87       	std	Y+8, r24	; 0x08
 166:	9f 83       	std	Y+7, r25	; 0x07
	millis /= 1000;
	
	seg = millis%60;
 168:	0f 2e       	mov	r0, r31
 16a:	f8 ee       	ldi	r31, 0xE8	; 232
 16c:	af 2e       	mov	r10, r31
 16e:	f0 2d       	mov	r31, r0
 170:	0f 2e       	mov	r0, r31
 172:	f3 e0       	ldi	r31, 0x03	; 3
 174:	bf 2e       	mov	r11, r31
 176:	f0 2d       	mov	r31, r0
 178:	c1 2c       	mov	r12, r1
 17a:	d1 2c       	mov	r13, r1
 17c:	e1 2c       	mov	r14, r1
 17e:	f1 2c       	mov	r15, r1
 180:	00 e0       	ldi	r16, 0x00	; 0
 182:	10 e0       	ldi	r17, 0x00	; 0
 184:	cc d6       	rcall	.+3480   	; 0xf1e <__udivdi3>
 186:	0f 2e       	mov	r0, r31
 188:	fc e3       	ldi	r31, 0x3C	; 60
 18a:	af 2e       	mov	r10, r31
 18c:	f0 2d       	mov	r31, r0
 18e:	b1 2c       	mov	r11, r1
 190:	c4 d6       	rcall	.+3464   	; 0xf1a <__umoddi3>
 192:	20 93 49 02 	sts	0x0249, r18	; 0x800249 <seg>
 196:	30 93 4a 02 	sts	0x024A, r19	; 0x80024a <seg+0x1>
	millis /= 60;
	
	min = millis%60;
 19a:	0f 2e       	mov	r0, r31
 19c:	f0 e6       	ldi	r31, 0x60	; 96
 19e:	af 2e       	mov	r10, r31
 1a0:	f0 2d       	mov	r31, r0
 1a2:	0f 2e       	mov	r0, r31
 1a4:	fa ee       	ldi	r31, 0xEA	; 234
 1a6:	bf 2e       	mov	r11, r31
 1a8:	f0 2d       	mov	r31, r0
 1aa:	24 2d       	mov	r18, r4
 1ac:	35 2d       	mov	r19, r5
 1ae:	46 2d       	mov	r20, r6
 1b0:	57 2d       	mov	r21, r7
 1b2:	68 2d       	mov	r22, r8
 1b4:	79 2d       	mov	r23, r9
 1b6:	88 85       	ldd	r24, Y+8	; 0x08
 1b8:	9f 81       	ldd	r25, Y+7	; 0x07
 1ba:	b1 d6       	rcall	.+3426   	; 0xf1e <__udivdi3>
 1bc:	0f 2e       	mov	r0, r31
 1be:	fc e3       	ldi	r31, 0x3C	; 60
 1c0:	af 2e       	mov	r10, r31
 1c2:	f0 2d       	mov	r31, r0
 1c4:	b1 2c       	mov	r11, r1
 1c6:	a9 d6       	rcall	.+3410   	; 0xf1a <__umoddi3>
 1c8:	20 93 4d 02 	sts	0x024D, r18	; 0x80024d <min>
 1cc:	30 93 4e 02 	sts	0x024E, r19	; 0x80024e <min+0x1>
	millis /= 60;
 1d0:	68 94       	set
 1d2:	aa 24       	eor	r10, r10
 1d4:	a7 f8       	bld	r10, 7
 1d6:	0f 2e       	mov	r0, r31
 1d8:	fe ee       	ldi	r31, 0xEE	; 238
 1da:	bf 2e       	mov	r11, r31
 1dc:	f0 2d       	mov	r31, r0
 1de:	0f 2e       	mov	r0, r31
 1e0:	f6 e3       	ldi	r31, 0x36	; 54
 1e2:	cf 2e       	mov	r12, r31
 1e4:	f0 2d       	mov	r31, r0
 1e6:	24 2d       	mov	r18, r4
 1e8:	35 2d       	mov	r19, r5
 1ea:	46 2d       	mov	r20, r6
 1ec:	57 2d       	mov	r21, r7
 1ee:	68 2d       	mov	r22, r8
 1f0:	79 2d       	mov	r23, r9
 1f2:	88 85       	ldd	r24, Y+8	; 0x08
 1f4:	9f 81       	ldd	r25, Y+7	; 0x07
 1f6:	93 d6       	rcall	.+3366   	; 0xf1e <__udivdi3>
 1f8:	22 2e       	mov	r2, r18
 1fa:	33 2e       	mov	r3, r19
 1fc:	49 83       	std	Y+1, r20	; 0x01
 1fe:	5a 83       	std	Y+2, r21	; 0x02
 200:	6b 83       	std	Y+3, r22	; 0x03
 202:	7c 83       	std	Y+4, r23	; 0x04
 204:	8d 83       	std	Y+5, r24	; 0x05
 206:	9e 83       	std	Y+6, r25	; 0x06
	
	years = (millis/8760) + 1970;
 208:	a1 2c       	mov	r10, r1
 20a:	0f 2e       	mov	r0, r31
 20c:	fc e2       	ldi	r31, 0x2C	; 44
 20e:	bf 2e       	mov	r11, r31
 210:	f0 2d       	mov	r31, r0
 212:	0f 2e       	mov	r0, r31
 214:	f1 eb       	ldi	r31, 0xB1	; 177
 216:	cf 2e       	mov	r12, r31
 218:	f0 2d       	mov	r31, r0
 21a:	0f 2e       	mov	r0, r31
 21c:	f7 e5       	ldi	r31, 0x57	; 87
 21e:	df 2e       	mov	r13, r31
 220:	f0 2d       	mov	r31, r0
 222:	0f 2e       	mov	r0, r31
 224:	f7 e0       	ldi	r31, 0x07	; 7
 226:	ef 2e       	mov	r14, r31
 228:	f0 2d       	mov	r31, r0
 22a:	24 2d       	mov	r18, r4
 22c:	35 2d       	mov	r19, r5
 22e:	46 2d       	mov	r20, r6
 230:	57 2d       	mov	r21, r7
 232:	68 2d       	mov	r22, r8
 234:	79 2d       	mov	r23, r9
 236:	88 85       	ldd	r24, Y+8	; 0x08
 238:	9f 81       	ldd	r25, Y+7	; 0x07
 23a:	71 d6       	rcall	.+3298   	; 0xf1e <__udivdi3>
 23c:	82 2e       	mov	r8, r18
 23e:	93 2e       	mov	r9, r19
 240:	8e e4       	ldi	r24, 0x4E	; 78
 242:	88 1a       	sub	r8, r24
 244:	88 ef       	ldi	r24, 0xF8	; 248
 246:	98 0a       	sbc	r9, r24
 248:	90 92 46 02 	sts	0x0246, r9	; 0x800246 <years+0x1>
 24c:	80 92 45 02 	sts	0x0245, r8	; 0x800245 <years>
	millis %= 8760;
 250:	0f 2e       	mov	r0, r31
 252:	f8 e3       	ldi	r31, 0x38	; 56
 254:	af 2e       	mov	r10, r31
 256:	f0 2d       	mov	r31, r0
 258:	0f 2e       	mov	r0, r31
 25a:	f2 e2       	ldi	r31, 0x22	; 34
 25c:	bf 2e       	mov	r11, r31
 25e:	f0 2d       	mov	r31, r0
 260:	c1 2c       	mov	r12, r1
 262:	d1 2c       	mov	r13, r1
 264:	e1 2c       	mov	r14, r1
 266:	f1 2c       	mov	r15, r1
 268:	22 2d       	mov	r18, r2
 26a:	33 2d       	mov	r19, r3
 26c:	49 81       	ldd	r20, Y+1	; 0x01
 26e:	5a 81       	ldd	r21, Y+2	; 0x02
 270:	6b 81       	ldd	r22, Y+3	; 0x03
 272:	7c 81       	ldd	r23, Y+4	; 0x04
 274:	8d 81       	ldd	r24, Y+5	; 0x05
 276:	9e 81       	ldd	r25, Y+6	; 0x06
 278:	50 d6       	rcall	.+3232   	; 0xf1a <__umoddi3>
 27a:	42 2e       	mov	r4, r18
 27c:	53 2e       	mov	r5, r19
 27e:	64 2e       	mov	r6, r20
 280:	75 2e       	mov	r7, r21
 282:	86 2e       	mov	r8, r22
 284:	97 2e       	mov	r9, r23
 286:	8a 83       	std	Y+2, r24	; 0x02
 288:	99 83       	std	Y+1, r25	; 0x01
	
	month = millis/730;
 28a:	0f 2e       	mov	r0, r31
 28c:	fa ed       	ldi	r31, 0xDA	; 218
 28e:	af 2e       	mov	r10, r31
 290:	f0 2d       	mov	r31, r0
 292:	68 94       	set
 294:	bb 24       	eor	r11, r11
 296:	b1 f8       	bld	r11, 1
 298:	42 d6       	rcall	.+3204   	; 0xf1e <__udivdi3>
 29a:	20 93 4b 02 	sts	0x024B, r18	; 0x80024b <month>
 29e:	30 93 4c 02 	sts	0x024C, r19	; 0x80024c <month+0x1>
	millis %= 730;
 2a2:	24 2d       	mov	r18, r4
 2a4:	35 2d       	mov	r19, r5
 2a6:	46 2d       	mov	r20, r6
 2a8:	57 2d       	mov	r21, r7
 2aa:	68 2d       	mov	r22, r8
 2ac:	79 2d       	mov	r23, r9
 2ae:	8a 81       	ldd	r24, Y+2	; 0x02
 2b0:	99 81       	ldd	r25, Y+1	; 0x01
 2b2:	33 d6       	rcall	.+3174   	; 0xf1a <__umoddi3>
 2b4:	42 2e       	mov	r4, r18
 2b6:	53 2e       	mov	r5, r19
 2b8:	64 2e       	mov	r6, r20
 2ba:	75 2e       	mov	r7, r21
 2bc:	86 2e       	mov	r8, r22
 2be:	97 2e       	mov	r9, r23
 2c0:	8a 83       	std	Y+2, r24	; 0x02
	
	days = millis/24;
 2c2:	99 83       	std	Y+1, r25	; 0x01
 2c4:	0f 2e       	mov	r0, r31
 2c6:	f8 e1       	ldi	r31, 0x18	; 24
 2c8:	af 2e       	mov	r10, r31
 2ca:	f0 2d       	mov	r31, r0
 2cc:	b1 2c       	mov	r11, r1
 2ce:	27 d6       	rcall	.+3150   	; 0xf1e <__udivdi3>
 2d0:	20 93 47 02 	sts	0x0247, r18	; 0x800247 <days>
 2d4:	30 93 48 02 	sts	0x0248, r19	; 0x800248 <days+0x1>
	millis %=24;
	
	hr = millis;
 2d8:	24 2d       	mov	r18, r4
 2da:	35 2d       	mov	r19, r5
 2dc:	46 2d       	mov	r20, r6
 2de:	57 2d       	mov	r21, r7
 2e0:	68 2d       	mov	r22, r8
 2e2:	79 2d       	mov	r23, r9
 2e4:	8a 81       	ldd	r24, Y+2	; 0x02
 2e6:	99 81       	ldd	r25, Y+1	; 0x01
 2e8:	18 d6       	rcall	.+3120   	; 0xf1a <__umoddi3>
 2ea:	20 93 4f 02 	sts	0x024F, r18	; 0x80024f <hr>
 2ee:	30 93 50 02 	sts	0x0250, r19	; 0x800250 <hr+0x1>
	
	millis = 0;
	
}
 2f2:	28 96       	adiw	r28, 0x08	; 8
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	df 90       	pop	r13
 30c:	cf 90       	pop	r12
 30e:	bf 90       	pop	r11
 310:	af 90       	pop	r10
 312:	9f 90       	pop	r9
 314:	8f 90       	pop	r8
 316:	7f 90       	pop	r7
 318:	6f 90       	pop	r6
 31a:	5f 90       	pop	r5
 31c:	4f 90       	pop	r4
 31e:	3f 90       	pop	r3
 320:	2f 90       	pop	r2
 322:	08 95       	ret

00000324 <bisiesto>:
		years++;
		
	}
}

uint8_t bisiesto( uint16_t year ){
 324:	ac 01       	movw	r20, r24
	if(  ( (year % 4 ==0) && (year % 100 != 0) ) || (year % 400 == 0) ){
 326:	83 70       	andi	r24, 0x03	; 3
 328:	99 27       	eor	r25, r25
 32a:	89 2b       	or	r24, r25
 32c:	99 f4       	brne	.+38     	; 0x354 <bisiesto+0x30>
 32e:	9a 01       	movw	r18, r20
 330:	36 95       	lsr	r19
 332:	27 95       	ror	r18
 334:	36 95       	lsr	r19
 336:	27 95       	ror	r18
 338:	ab e7       	ldi	r26, 0x7B	; 123
 33a:	b4 e1       	ldi	r27, 0x14	; 20
 33c:	df d5       	rcall	.+3006   	; 0xefc <__umulhisi3>
 33e:	96 95       	lsr	r25
 340:	87 95       	ror	r24
 342:	64 e6       	ldi	r22, 0x64	; 100
 344:	68 9f       	mul	r22, r24
 346:	90 01       	movw	r18, r0
 348:	69 9f       	mul	r22, r25
 34a:	30 0d       	add	r19, r0
 34c:	11 24       	eor	r1, r1
 34e:	42 17       	cp	r20, r18
 350:	53 07       	cpc	r21, r19
 352:	c9 f4       	brne	.+50     	; 0x386 <bisiesto+0x62>
		return 1;
 354:	9a 01       	movw	r18, r20
 356:	32 95       	swap	r19
 358:	22 95       	swap	r18
 35a:	2f 70       	andi	r18, 0x0F	; 15
 35c:	23 27       	eor	r18, r19
 35e:	3f 70       	andi	r19, 0x0F	; 15
 360:	23 27       	eor	r18, r19
 362:	ae e3       	ldi	r26, 0x3E	; 62
 364:	ba e0       	ldi	r27, 0x0A	; 10
 366:	ca d5       	rcall	.+2964   	; 0xefc <__umulhisi3>
 368:	60 e9       	ldi	r22, 0x90	; 144
 36a:	71 e0       	ldi	r23, 0x01	; 1
 36c:	86 9f       	mul	r24, r22
 36e:	90 01       	movw	r18, r0
 370:	87 9f       	mul	r24, r23
 372:	30 0d       	add	r19, r0
 374:	96 9f       	mul	r25, r22
 376:	30 0d       	add	r19, r0
 378:	11 24       	eor	r1, r1
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	42 17       	cp	r20, r18
 37e:	53 07       	cpc	r21, r19
 380:	19 f0       	breq	.+6      	; 0x388 <bisiesto+0x64>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	08 95       	ret
 386:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
 388:	08 95       	ret

0000038a <Clock_Update>:
	itoa(years,cad,10);
	UART_puts(0,cad);
	
}

void Clock_Update(){
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
	seg++;
 392:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <seg>
 396:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <seg+0x1>
 39a:	01 96       	adiw	r24, 0x01	; 1
	
	if (seg == 60){
 39c:	8c 33       	cpi	r24, 0x3C	; 60
 39e:	91 05       	cpc	r25, r1
 3a0:	29 f0       	breq	.+10     	; 0x3ac <Clock_Update+0x22>
	UART_puts(0,cad);
	
}

void Clock_Update(){
	seg++;
 3a2:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <seg+0x1>
 3a6:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <seg>
 3aa:	0d c0       	rjmp	.+26     	; 0x3c6 <Clock_Update+0x3c>
	
	if (seg == 60){
		seg = 0;
 3ac:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <seg+0x1>
 3b0:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <seg>
		min++;
 3b4:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <min>
 3b8:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <min+0x1>
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <min+0x1>
 3c2:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <min>
	}
	if(min == 60){
 3c6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <min>
 3ca:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <min+0x1>
 3ce:	cc 97       	sbiw	r24, 0x3c	; 60
 3d0:	69 f4       	brne	.+26     	; 0x3ec <Clock_Update+0x62>
		min = 0;
 3d2:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <min+0x1>
 3d6:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <min>
		hr++;
 3da:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <hr>
 3de:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <hr+0x1>
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <hr+0x1>
 3e8:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <hr>
	}
	if (hr == 24){
 3ec:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <hr>
 3f0:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <hr+0x1>
 3f4:	48 97       	sbiw	r24, 0x18	; 24
 3f6:	69 f4       	brne	.+26     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		hr = 0;
 3f8:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <hr+0x1>
 3fc:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <hr>
		days++;
 400:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <days>
 404:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <days+0x1>
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <days+0x1>
 40e:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <days>
	}
	if (days >= DM[month-1]){
 412:	c0 91 4b 02 	lds	r28, 0x024B	; 0x80024b <month>
 416:	d0 91 4c 02 	lds	r29, 0x024C	; 0x80024c <month+0x1>
 41a:	00 91 47 02 	lds	r16, 0x0247	; 0x800247 <days>
 41e:	10 91 48 02 	lds	r17, 0x0248	; 0x800248 <days+0x1>
 422:	fe 01       	movw	r30, r28
 424:	e1 50       	subi	r30, 0x01	; 1
 426:	fe 4f       	sbci	r31, 0xFE	; 254
 428:	80 81       	ld	r24, Z
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	08 17       	cp	r16, r24
 42e:	19 07       	cpc	r17, r25
 430:	c0 f0       	brcs	.+48     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
		if ( ( ( month == 2 ) && ( bisiesto(years) == 1 ) ) && (days <= 29) ){
 432:	c2 30       	cpi	r28, 0x02	; 2
 434:	d1 05       	cpc	r29, r1
 436:	51 f4       	brne	.+20     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 438:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <years>
 43c:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <years+0x1>
 440:	71 df       	rcall	.-286    	; 0x324 <bisiesto>
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	19 f4       	brne	.+6      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 446:	0e 31       	cpi	r16, 0x1E	; 30
 448:	11 05       	cpc	r17, r1
 44a:	00 f1       	brcs	.+64     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			
		}
		else{
			days = 1;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <days+0x1>
 454:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <days>
			month++;
 458:	21 96       	adiw	r28, 0x01	; 1
 45a:	d0 93 4c 02 	sts	0x024C, r29	; 0x80024c <month+0x1>
 45e:	c0 93 4b 02 	sts	0x024B, r28	; 0x80024b <month>
		}
	}
	if(month == 13){
 462:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <month>
 466:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <month+0x1>
 46a:	0d 97       	sbiw	r24, 0x0d	; 13
 46c:	79 f4       	brne	.+30     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		month = 1;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <month+0x1>
 476:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <month>
		years++;
 47a:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <years>
 47e:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <years+0x1>
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <years+0x1>
 488:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <years>
		
	}
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	08 95       	ret

00000496 <Clock_Display>:
	
	millis = 0;
	
}

void Clock_Display(){
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	00 d0       	rcall	.+0      	; 0x49c <Clock_Display+0x6>
 49c:	1f 92       	push	r1
 49e:	1f 92       	push	r1
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
	char cad[5];
	
	Clock_Update();
 4a4:	72 df       	rcall	.-284    	; 0x38a <Clock_Update>
	
	//hh:mm:ss dd/mm/aaaa
	itoa(hr,cad,10);
 4a6:	4a e0       	ldi	r20, 0x0A	; 10
 4a8:	be 01       	movw	r22, r28
 4aa:	6f 5f       	subi	r22, 0xFF	; 255
 4ac:	7f 4f       	sbci	r23, 0xFF	; 255
 4ae:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <hr>
 4b2:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <hr+0x1>
 4b6:	c6 d2       	rcall	.+1420   	; 0xa44 <itoa>
	UART_puts(0,cad);
 4b8:	be 01       	movw	r22, r28
 4ba:	6f 5f       	subi	r22, 0xFF	; 255
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	55 d2       	rcall	.+1194   	; 0x96c <UART_puts>
	
	UART_putchar(0,':');
 4c2:	6a e3       	ldi	r22, 0x3A	; 58
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	d0 d1       	rcall	.+928    	; 0x868 <UART_putchar>
 4c8:	4a e0       	ldi	r20, 0x0A	; 10
	
	itoa(min,cad,10);
 4ca:	be 01       	movw	r22, r28
 4cc:	6f 5f       	subi	r22, 0xFF	; 255
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <min>
 4d4:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <min+0x1>
 4d8:	b5 d2       	rcall	.+1386   	; 0xa44 <itoa>
 4da:	be 01       	movw	r22, r28
	UART_puts(0,cad);
 4dc:	6f 5f       	subi	r22, 0xFF	; 255
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	44 d2       	rcall	.+1160   	; 0x96c <UART_puts>
 4e4:	6a e3       	ldi	r22, 0x3A	; 58
	
	UART_putchar(0,':');
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	bf d1       	rcall	.+894    	; 0x868 <UART_putchar>
 4ea:	4a e0       	ldi	r20, 0x0A	; 10
 4ec:	be 01       	movw	r22, r28
	
	itoa(seg,cad,10);
 4ee:	6f 5f       	subi	r22, 0xFF	; 255
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <seg>
 4f6:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <seg+0x1>
 4fa:	a4 d2       	rcall	.+1352   	; 0xa44 <itoa>
 4fc:	be 01       	movw	r22, r28
	UART_puts(0,cad);
 4fe:	6f 5f       	subi	r22, 0xFF	; 255
 500:	7f 4f       	sbci	r23, 0xFF	; 255
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	33 d2       	rcall	.+1126   	; 0x96c <UART_puts>
 506:	60 e2       	ldi	r22, 0x20	; 32
 508:	80 e0       	ldi	r24, 0x00	; 0
	
	UART_putchar(0,' ');
 50a:	ae d1       	rcall	.+860    	; 0x868 <UART_putchar>
 50c:	4a e0       	ldi	r20, 0x0A	; 10
 50e:	be 01       	movw	r22, r28
	
	itoa(days,cad,10);
 510:	6f 5f       	subi	r22, 0xFF	; 255
 512:	7f 4f       	sbci	r23, 0xFF	; 255
 514:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <days>
 518:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <days+0x1>
 51c:	93 d2       	rcall	.+1318   	; 0xa44 <itoa>
 51e:	be 01       	movw	r22, r28
	UART_puts(0,cad);
 520:	6f 5f       	subi	r22, 0xFF	; 255
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	22 d2       	rcall	.+1092   	; 0x96c <UART_puts>
 528:	6f e2       	ldi	r22, 0x2F	; 47
	
	UART_putchar(0,'/');
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	9d d1       	rcall	.+826    	; 0x868 <UART_putchar>
 52e:	4a e0       	ldi	r20, 0x0A	; 10
 530:	be 01       	movw	r22, r28
	
	itoa(month,cad,10);
 532:	6f 5f       	subi	r22, 0xFF	; 255
 534:	7f 4f       	sbci	r23, 0xFF	; 255
 536:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <month>
 53a:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <month+0x1>
 53e:	82 d2       	rcall	.+1284   	; 0xa44 <itoa>
 540:	be 01       	movw	r22, r28
	UART_puts(0,cad);
 542:	6f 5f       	subi	r22, 0xFF	; 255
 544:	7f 4f       	sbci	r23, 0xFF	; 255
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	11 d2       	rcall	.+1058   	; 0x96c <UART_puts>
 54a:	6f e2       	ldi	r22, 0x2F	; 47
	
	UART_putchar(0,'/');
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	8c d1       	rcall	.+792    	; 0x868 <UART_putchar>
 550:	4a e0       	ldi	r20, 0x0A	; 10
	
	itoa(years,cad,10);
 552:	be 01       	movw	r22, r28
 554:	6f 5f       	subi	r22, 0xFF	; 255
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <years>
 55c:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <years+0x1>
 560:	71 d2       	rcall	.+1250   	; 0xa44 <itoa>
 562:	be 01       	movw	r22, r28
 564:	6f 5f       	subi	r22, 0xFF	; 255
	UART_puts(0,cad);
 566:	7f 4f       	sbci	r23, 0xFF	; 255
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	00 d2       	rcall	.+1024   	; 0x96c <UART_puts>
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
	
}
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <UART_AutoBaudRate>:
 57c:	8e ef       	ldi	r24, 0xFE	; 254
 57e:	8d b9       	out	0x0d, r24	; 13
 580:	14 bc       	out	0x24, r1	; 36
	
void UART_AutoBaudRate(){

	DDRE = ~(1<<PE0);
	TCCR0A = 0;
	TCCR0B = (2<<CS00);
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	85 bd       	out	0x25, r24	; 37
	
	while(PINE & 1<<PE0);
 586:	60 99       	sbic	0x0c, 0	; 12
 588:	fe cf       	rjmp	.-4      	; 0x586 <UART_AutoBaudRate+0xa>
	TCNT0 = 0;
 58a:	16 bc       	out	0x26, r1	; 38

	while(!(PINE & 1<<PE0));
 58c:	60 9b       	sbis	0x0c, 0	; 12
 58e:	fe cf       	rjmp	.-4      	; 0x58c <UART_AutoBaudRate+0x10>
	TCCR0B =0;
 590:	15 bc       	out	0x25, r1	; 37
	UBRR0 = TCNT0 -1;
 592:	86 b5       	in	r24, 0x26	; 38
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 59c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 5a0:	08 95       	ret

000005a2 <main>:
void UART_AutoBaudRate(void);

char str[10];

int main(){
	UART_Ini(0,0,8,1,2);
 5a2:	68 94       	set
 5a4:	ee 24       	eor	r14, r14
 5a6:	e1 f8       	bld	r14, 1
 5a8:	01 e0       	ldi	r16, 0x01	; 1
 5aa:	28 e0       	ldi	r18, 0x08	; 8
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	ba 01       	movw	r22, r20
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	c8 d0       	rcall	.+400    	; 0x746 <UART_Ini>
	
	UART_AutoBaudRate();
 5b6:	e2 df       	rcall	.-60     	; 0x57c <UART_AutoBaudRate>
	Timer0_Ini(); 
 5b8:	34 d0       	rcall	.+104    	; 0x622 <Timer0_Ini>
	
	UART_clrscr(0);
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	3f d2       	rcall	.+1150   	; 0xa3c <UART_clrscr>
	UART_gotoxy(0,5,1);
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	65 e0       	ldi	r22, 0x05	; 5
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	80 d2       	rcall	.+1280   	; 0xac6 <UART_gotoxy>
	UART_puts(0,"Autobauding done. UBRR0=");
 5c6:	6c e0       	ldi	r22, 0x0C	; 12
 5c8:	72 e0       	ldi	r23, 0x02	; 2
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	cf d1       	rcall	.+926    	; 0x96c <UART_puts>
 5ce:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	itoa(UBRR0,str,10);
 5d2:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 5d6:	4a e0       	ldi	r20, 0x0A	; 10
 5d8:	61 e5       	ldi	r22, 0x51	; 81
 5da:	72 e0       	ldi	r23, 0x02	; 2
 5dc:	33 d2       	rcall	.+1126   	; 0xa44 <itoa>
	UART_puts(0,str);
 5de:	61 e5       	ldi	r22, 0x51	; 81
 5e0:	72 e0       	ldi	r23, 0x02	; 2
 5e2:	80 e0       	ldi	r24, 0x00	; 0
	UART_puts(0,"\n\r");
 5e4:	c3 d1       	rcall	.+902    	; 0x96c <UART_puts>
 5e6:	65 e2       	ldi	r22, 0x25	; 37
 5e8:	72 e0       	ldi	r23, 0x02	; 2
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	bf d1       	rcall	.+894    	; 0x96c <UART_puts>
	UART_getchar(0);
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	cf d1       	rcall	.+926    	; 0x990 <UART_getchar>
	
	
	Clock_Ini(1583049590000);
 5f2:	20 ef       	ldi	r18, 0xF0	; 240
 5f4:	34 ec       	ldi	r19, 0xC4	; 196
 5f6:	4b e1       	ldi	r20, 0x1B	; 27
 5f8:	55 e9       	ldi	r21, 0x95	; 149
 5fa:	60 e7       	ldi	r22, 0x70	; 112
 5fc:	71 e0       	ldi	r23, 0x01	; 1
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	90 e0       	ldi	r25, 0x00	; 0
	
	/* == main loop == */
	while(1){
		if( Timer0_SecFlag() == 1){
 602:	90 dd       	rcall	.-1248   	; 0x124 <Clock_Ini>
 604:	1e d0       	rcall	.+60     	; 0x642 <Timer0_SecFlag>
 606:	81 30       	cpi	r24, 0x01	; 1
			/* ¿ha pasado un Segundo? */
			UART_gotoxy(0,5,2);
 608:	e9 f7       	brne	.-6      	; 0x604 <main+0x62>
 60a:	42 e0       	ldi	r20, 0x02	; 2
 60c:	65 e0       	ldi	r22, 0x05	; 5
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	5a d2       	rcall	.+1204   	; 0xac6 <UART_gotoxy>
			UART_clrscr(0);
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	13 d2       	rcall	.+1062   	; 0xa3c <UART_clrscr>
 616:	3f df       	rcall	.-386    	; 0x496 <Clock_Display>
			Clock_Display();
 618:	43 e0       	ldi	r20, 0x03	; 3
 61a:	65 e0       	ldi	r22, 0x05	; 5
			UART_gotoxy(0,5,3);
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	53 d2       	rcall	.+1190   	; 0xac6 <UART_gotoxy>
 620:	f1 cf       	rjmp	.-30     	; 0x604 <main+0x62>

00000622 <Timer0_Ini>:
static volatile uint8_t SecFlag;
static volatile uint64_t ms;

void Timer0_Ini ( void ){
	
	TCNT0 = 0;
 622:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1 << WGM01);
 624:	84 b5       	in	r24, 0x24	; 36
 626:	82 60       	ori	r24, 0x02	; 2
 628:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00) | (1<<CS01);
 62a:	85 b5       	in	r24, 0x25	; 37
 62c:	83 60       	ori	r24, 0x03	; 3
 62e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);
 630:	ee e6       	ldi	r30, 0x6E	; 110
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	82 60       	ori	r24, 0x02	; 2
 638:	80 83       	st	Z, r24
	OCR0A = 249;
 63a:	89 ef       	ldi	r24, 0xF9	; 249
 63c:	87 bd       	out	0x27, r24	; 39
	
	sei(); /* habilita interrupciones (global) */
 63e:	78 94       	sei
 640:	08 95       	ret

00000642 <Timer0_SecFlag>:
}

uint8_t Timer0_SecFlag ( void ){
	if( SecFlag ){
 642:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <SecFlag>
 646:	88 23       	and	r24, r24
 648:	19 f0       	breq	.+6      	; 0x650 <Timer0_SecFlag+0xe>
		SecFlag=0;
 64a:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <SecFlag>
		return 1;
 64e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return 0;
	}
}
 650:	08 95       	ret

00000652 <__vector_21>:

/* TIMER0_COMPA_vect */
ISR (TIMER0_COMPA_vect){ 
 652:	1f 92       	push	r1
 654:	0f 92       	push	r0
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	0f 92       	push	r0
 65a:	11 24       	eor	r1, r1
 65c:	0b b6       	in	r0, 0x3b	; 59
 65e:	0f 92       	push	r0
 660:	2f 93       	push	r18
 662:	3f 93       	push	r19
 664:	4f 93       	push	r20
 666:	5f 93       	push	r21
 668:	6f 93       	push	r22
 66a:	7f 93       	push	r23
 66c:	8f 93       	push	r24
 66e:	9f 93       	push	r25
 670:	af 93       	push	r26
 672:	ef 93       	push	r30
 674:	ff 93       	push	r31
	static uint16_t mSecCnt;
	mSecCnt++; /* Incrementa contador de milisegundos */
 676:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <__data_end>
 67a:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <__data_end+0x1>
 67e:	31 96       	adiw	r30, 0x01	; 1
 680:	f0 93 3b 02 	sts	0x023B, r31	; 0x80023b <__data_end+0x1>
 684:	e0 93 3a 02 	sts	0x023A, r30	; 0x80023a <__data_end>
	ms++;
 688:	20 91 3c 02 	lds	r18, 0x023C	; 0x80023c <ms>
 68c:	30 91 3d 02 	lds	r19, 0x023D	; 0x80023d <ms+0x1>
 690:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <ms+0x2>
 694:	50 91 3f 02 	lds	r21, 0x023F	; 0x80023f <ms+0x3>
 698:	60 91 40 02 	lds	r22, 0x0240	; 0x800240 <ms+0x4>
 69c:	70 91 41 02 	lds	r23, 0x0241	; 0x800241 <ms+0x5>
 6a0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <ms+0x6>
 6a4:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <ms+0x7>
 6a8:	a1 e0       	ldi	r26, 0x01	; 1
 6aa:	95 d4       	rcall	.+2346   	; 0xfd6 <__adddi3_s8>
 6ac:	20 93 3c 02 	sts	0x023C, r18	; 0x80023c <ms>
 6b0:	30 93 3d 02 	sts	0x023D, r19	; 0x80023d <ms+0x1>
 6b4:	40 93 3e 02 	sts	0x023E, r20	; 0x80023e <ms+0x2>
 6b8:	50 93 3f 02 	sts	0x023F, r21	; 0x80023f <ms+0x3>
 6bc:	60 93 40 02 	sts	0x0240, r22	; 0x800240 <ms+0x4>
 6c0:	70 93 41 02 	sts	0x0241, r23	; 0x800241 <ms+0x5>
 6c4:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <ms+0x6>
 6c8:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <ms+0x7>
	if( mSecCnt==1000 ){
 6cc:	e8 3e       	cpi	r30, 0xE8	; 232
 6ce:	f3 40       	sbci	r31, 0x03	; 3
 6d0:	39 f4       	brne	.+14     	; 0x6e0 <__vector_21+0x8e>
		mSecCnt=0;
 6d2:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <__data_end+0x1>
 6d6:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <__data_end>
		SecFlag=1; /* Bandera de Segundos */
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <SecFlag>
	}
}
 6e0:	ff 91       	pop	r31
 6e2:	ef 91       	pop	r30
 6e4:	af 91       	pop	r26
 6e6:	9f 91       	pop	r25
 6e8:	8f 91       	pop	r24
 6ea:	7f 91       	pop	r23
 6ec:	6f 91       	pop	r22
 6ee:	5f 91       	pop	r21
 6f0:	4f 91       	pop	r20
 6f2:	3f 91       	pop	r19
 6f4:	2f 91       	pop	r18
 6f6:	0f 90       	pop	r0
 6f8:	0b be       	out	0x3b, r0	; 59
 6fa:	0f 90       	pop	r0
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	0f 90       	pop	r0
 700:	1f 90       	pop	r1
 702:	18 95       	reti

00000704 <UART0Buf_Ini>:
		(*str)-=48;
		aux+=(*str);
		str++;
	}
	return aux;
}
 704:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <buffer_rx0+0x40>
 708:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <buffer_rx0+0x41>
 70c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <buffer_tx0+0x40>
 710:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <buffer_tx0+0x41>
 714:	10 92 27 04 	sts	0x0427, r1	; 0x800427 <buffer_rx1+0x40>
 718:	10 92 28 04 	sts	0x0428, r1	; 0x800428 <buffer_rx1+0x41>
 71c:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <buffer_tx1+0x40>
 720:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <buffer_tx1+0x41>
 724:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <buffer_rx2+0x40>
 728:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <buffer_rx2+0x41>
 72c:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <buffer_tx2+0x40>
 730:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <buffer_tx2+0x41>
 734:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <buffer_rx3+0x40>
 738:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <buffer_rx3+0x41>
 73c:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <buffer_tx3+0x40>
 740:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <buffer_tx3+0x41>
 744:	08 95       	ret

00000746 <UART_Ini>:
 746:	6f 92       	push	r6
 748:	7f 92       	push	r7
 74a:	8f 92       	push	r8
 74c:	9f 92       	push	r9
 74e:	cf 92       	push	r12
 750:	df 92       	push	r13
 752:	ef 92       	push	r14
 754:	ff 92       	push	r15
 756:	0f 93       	push	r16
 758:	1f 93       	push	r17
 75a:	cf 93       	push	r28
 75c:	df 93       	push	r29
 75e:	00 d0       	rcall	.+0      	; 0x760 <UART_Ini+0x1a>
 760:	00 d0       	rcall	.+0      	; 0x762 <UART_Ini+0x1c>
 762:	cd b7       	in	r28, 0x3d	; 61
 764:	de b7       	in	r29, 0x3e	; 62
 766:	49 83       	std	Y+1, r20	; 0x01
 768:	5a 83       	std	Y+2, r21	; 0x02
 76a:	6b 83       	std	Y+3, r22	; 0x03
 76c:	7c 83       	std	Y+4, r23	; 0x04
 76e:	12 2f       	mov	r17, r18
 770:	83 30       	cpi	r24, 0x03	; 3
 772:	f9 f0       	breq	.+62     	; 0x7b2 <UART_Ini+0x6c>
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	6c 01       	movw	r12, r24
 778:	cc 0c       	add	r12, r12
 77a:	dd 1c       	adc	r13, r13
 77c:	cc 0c       	add	r12, r12
 77e:	dd 1c       	adc	r13, r13
 780:	cc 0c       	add	r12, r12
 782:	dd 1c       	adc	r13, r13
 784:	96 01       	movw	r18, r12
 786:	20 54       	subi	r18, 0x40	; 64
 788:	3f 4f       	sbci	r19, 0xFF	; 255
 78a:	3e 83       	std	Y+6, r19	; 0x06
 78c:	2d 83       	std	Y+5, r18	; 0x05
 78e:	46 01       	movw	r8, r12
 790:	31 ec       	ldi	r19, 0xC1	; 193
 792:	83 0e       	add	r8, r19
 794:	91 1c       	adc	r9, r1
 796:	e2 ec       	ldi	r30, 0xC2	; 194
 798:	ce 0e       	add	r12, r30
 79a:	d1 1c       	adc	r13, r1
 79c:	82 95       	swap	r24
 79e:	92 95       	swap	r25
 7a0:	90 7f       	andi	r25, 0xF0	; 240
 7a2:	98 27       	eor	r25, r24
 7a4:	80 7f       	andi	r24, 0xF0	; 240
 7a6:	98 27       	eor	r25, r24
 7a8:	3c 01       	movw	r6, r24
 7aa:	f4 ec       	ldi	r31, 0xC4	; 196
 7ac:	6f 0e       	add	r6, r31
 7ae:	71 1c       	adc	r7, r1
 7b0:	16 c0       	rjmp	.+44     	; 0x7de <UART_Ini+0x98>
 7b2:	0f 2e       	mov	r0, r31
 7b4:	f2 e3       	ldi	r31, 0x32	; 50
 7b6:	cf 2e       	mov	r12, r31
 7b8:	dd 24       	eor	r13, r13
 7ba:	d3 94       	inc	r13
 7bc:	f0 2d       	mov	r31, r0
 7be:	0f 2e       	mov	r0, r31
 7c0:	f1 e3       	ldi	r31, 0x31	; 49
 7c2:	8f 2e       	mov	r8, r31
 7c4:	99 24       	eor	r9, r9
 7c6:	93 94       	inc	r9
 7c8:	f0 2d       	mov	r31, r0
 7ca:	20 e3       	ldi	r18, 0x30	; 48
 7cc:	31 e0       	ldi	r19, 0x01	; 1
 7ce:	3e 83       	std	Y+6, r19	; 0x06
 7d0:	2d 83       	std	Y+5, r18	; 0x05
 7d2:	0f 2e       	mov	r0, r31
 7d4:	f4 e3       	ldi	r31, 0x34	; 52
 7d6:	6f 2e       	mov	r6, r31
 7d8:	77 24       	eor	r7, r7
 7da:	73 94       	inc	r7
 7dc:	f0 2d       	mov	r31, r0
 7de:	01 30       	cpi	r16, 0x01	; 1
 7e0:	09 f4       	brne	.+2      	; 0x7e4 <UART_Ini+0x9e>
 7e2:	03 e0       	ldi	r16, 0x03	; 3
 7e4:	60 e8       	ldi	r22, 0x80	; 128
 7e6:	74 e8       	ldi	r23, 0x84	; 132
 7e8:	8e e1       	ldi	r24, 0x1E	; 30
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	29 81       	ldd	r18, Y+1	; 0x01
 7ee:	3a 81       	ldd	r19, Y+2	; 0x02
 7f0:	4b 81       	ldd	r20, Y+3	; 0x03
 7f2:	5c 81       	ldd	r21, Y+4	; 0x04
 7f4:	61 d3       	rcall	.+1730   	; 0xeb8 <__udivmodsi4>
 7f6:	21 50       	subi	r18, 0x01	; 1
 7f8:	31 09       	sbc	r19, r1
 7fa:	f3 01       	movw	r30, r6
 7fc:	31 83       	std	Z+1, r19	; 0x01
 7fe:	20 83       	st	Z, r18
 800:	ed 81       	ldd	r30, Y+5	; 0x05
 802:	fe 81       	ldd	r31, Y+6	; 0x06
 804:	80 81       	ld	r24, Z
 806:	82 60       	ori	r24, 0x02	; 2
 808:	80 83       	st	Z, r24
 80a:	88 e9       	ldi	r24, 0x98	; 152
 80c:	f4 01       	movw	r30, r8
 80e:	80 83       	st	Z, r24
 810:	8e 2d       	mov	r24, r14
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	01 97       	sbiw	r24, 0x01	; 1
 816:	7c 01       	movw	r14, r24
 818:	ee 0c       	add	r14, r14
 81a:	ff 1c       	adc	r15, r15
 81c:	ee 0c       	add	r14, r14
 81e:	ff 1c       	adc	r15, r15
 820:	ee 0c       	add	r14, r14
 822:	ff 1c       	adc	r15, r15
 824:	81 2f       	mov	r24, r17
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	05 97       	sbiw	r24, 0x05	; 5
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	8e 29       	or	r24, r14
 830:	f0 e1       	ldi	r31, 0x10	; 16
 832:	0f 9f       	mul	r16, r31
 834:	80 01       	movw	r16, r0
 836:	11 24       	eor	r1, r1
 838:	80 2b       	or	r24, r16
 83a:	f6 01       	movw	r30, r12
 83c:	80 83       	st	Z, r24
 83e:	62 df       	rcall	.-316    	; 0x704 <UART0Buf_Ini>
 840:	78 94       	sei
 842:	26 96       	adiw	r28, 0x06	; 6
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	f8 94       	cli
 848:	de bf       	out	0x3e, r29	; 62
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	cd bf       	out	0x3d, r28	; 61
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
 854:	0f 91       	pop	r16
 856:	ff 90       	pop	r15
 858:	ef 90       	pop	r14
 85a:	df 90       	pop	r13
 85c:	cf 90       	pop	r12
 85e:	9f 90       	pop	r9
 860:	8f 90       	pop	r8
 862:	7f 90       	pop	r7
 864:	6f 90       	pop	r6
 866:	08 95       	ret

00000868 <UART_putchar>:
 868:	81 30       	cpi	r24, 0x01	; 1
 86a:	31 f1       	breq	.+76     	; 0x8b8 <UART_putchar+0x50>
 86c:	38 f0       	brcs	.+14     	; 0x87c <UART_putchar+0x14>
 86e:	82 30       	cpi	r24, 0x02	; 2
 870:	09 f4       	brne	.+2      	; 0x874 <UART_putchar+0xc>
 872:	40 c0       	rjmp	.+128    	; 0x8f4 <UART_putchar+0x8c>
 874:	83 30       	cpi	r24, 0x03	; 3
 876:	09 f4       	brne	.+2      	; 0x87a <UART_putchar+0x12>
 878:	5b c0       	rjmp	.+182    	; 0x930 <UART_putchar+0xc8>
 87a:	08 95       	ret
 87c:	ab e9       	ldi	r26, 0x9B	; 155
 87e:	b2 e0       	ldi	r27, 0x02	; 2
 880:	ec e9       	ldi	r30, 0x9C	; 156
 882:	f2 e0       	ldi	r31, 0x02	; 2
 884:	2c 91       	ld	r18, X
 886:	80 81       	ld	r24, Z
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	8f 73       	andi	r24, 0x3F	; 63
 890:	99 27       	eor	r25, r25
 892:	28 17       	cp	r18, r24
 894:	39 07       	cpc	r19, r25
 896:	b1 f3       	breq	.-20     	; 0x884 <UART_putchar+0x1c>
 898:	ab e9       	ldi	r26, 0x9B	; 155
 89a:	b2 e0       	ldi	r27, 0x02	; 2
 89c:	ec 91       	ld	r30, X
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	8e 0f       	add	r24, r30
 8a2:	8c 93       	st	X, r24
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	e5 5a       	subi	r30, 0xA5	; 165
 8a8:	fd 4f       	sbci	r31, 0xFD	; 253
 8aa:	60 83       	st	Z, r22
 8ac:	e1 ec       	ldi	r30, 0xC1	; 193
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	80 81       	ld	r24, Z
 8b2:	80 62       	ori	r24, 0x20	; 32
 8b4:	80 83       	st	Z, r24
 8b6:	08 95       	ret
 8b8:	a3 ea       	ldi	r26, 0xA3	; 163
 8ba:	b3 e0       	ldi	r27, 0x03	; 3
 8bc:	e4 ea       	ldi	r30, 0xA4	; 164
 8be:	f3 e0       	ldi	r31, 0x03	; 3
 8c0:	2c 91       	ld	r18, X
 8c2:	80 81       	ld	r24, Z
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	01 97       	sbiw	r24, 0x01	; 1
 8ca:	8f 73       	andi	r24, 0x3F	; 63
 8cc:	99 27       	eor	r25, r25
 8ce:	28 17       	cp	r18, r24
 8d0:	39 07       	cpc	r19, r25
 8d2:	b1 f3       	breq	.-20     	; 0x8c0 <UART_putchar+0x58>
 8d4:	a3 ea       	ldi	r26, 0xA3	; 163
 8d6:	b3 e0       	ldi	r27, 0x03	; 3
 8d8:	ec 91       	ld	r30, X
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	8e 0f       	add	r24, r30
 8de:	8c 93       	st	X, r24
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	ed 59       	subi	r30, 0x9D	; 157
 8e4:	fc 4f       	sbci	r31, 0xFC	; 252
 8e6:	60 83       	st	Z, r22
 8e8:	e9 ec       	ldi	r30, 0xC9	; 201
 8ea:	f0 e0       	ldi	r31, 0x00	; 0
 8ec:	80 81       	ld	r24, Z
 8ee:	80 62       	ori	r24, 0x20	; 32
 8f0:	80 83       	st	Z, r24
 8f2:	08 95       	ret
 8f4:	ab ea       	ldi	r26, 0xAB	; 171
 8f6:	b4 e0       	ldi	r27, 0x04	; 4
 8f8:	ec ea       	ldi	r30, 0xAC	; 172
 8fa:	f4 e0       	ldi	r31, 0x04	; 4
 8fc:	2c 91       	ld	r18, X
 8fe:	80 81       	ld	r24, Z
 900:	30 e0       	ldi	r19, 0x00	; 0
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	01 97       	sbiw	r24, 0x01	; 1
 906:	8f 73       	andi	r24, 0x3F	; 63
 908:	99 27       	eor	r25, r25
 90a:	28 17       	cp	r18, r24
 90c:	39 07       	cpc	r19, r25
 90e:	b1 f3       	breq	.-20     	; 0x8fc <UART_putchar+0x94>
 910:	ab ea       	ldi	r26, 0xAB	; 171
 912:	b4 e0       	ldi	r27, 0x04	; 4
 914:	ec 91       	ld	r30, X
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	8e 0f       	add	r24, r30
 91a:	8c 93       	st	X, r24
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	e5 59       	subi	r30, 0x95	; 149
 920:	fb 4f       	sbci	r31, 0xFB	; 251
 922:	60 83       	st	Z, r22
 924:	e1 ed       	ldi	r30, 0xD1	; 209
 926:	f0 e0       	ldi	r31, 0x00	; 0
 928:	80 81       	ld	r24, Z
 92a:	80 62       	ori	r24, 0x20	; 32
 92c:	80 83       	st	Z, r24
 92e:	08 95       	ret
 930:	af e1       	ldi	r26, 0x1F	; 31
 932:	b3 e0       	ldi	r27, 0x03	; 3
 934:	e0 e2       	ldi	r30, 0x20	; 32
 936:	f3 e0       	ldi	r31, 0x03	; 3
 938:	2c 91       	ld	r18, X
 93a:	80 81       	ld	r24, Z
 93c:	30 e0       	ldi	r19, 0x00	; 0
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	01 97       	sbiw	r24, 0x01	; 1
 942:	8f 73       	andi	r24, 0x3F	; 63
 944:	99 27       	eor	r25, r25
 946:	28 17       	cp	r18, r24
 948:	39 07       	cpc	r19, r25
 94a:	b1 f3       	breq	.-20     	; 0x938 <UART_putchar+0xd0>
 94c:	af e1       	ldi	r26, 0x1F	; 31
 94e:	b3 e0       	ldi	r27, 0x03	; 3
 950:	ec 91       	ld	r30, X
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	8e 0f       	add	r24, r30
 956:	8c 93       	st	X, r24
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	e1 52       	subi	r30, 0x21	; 33
 95c:	fd 4f       	sbci	r31, 0xFD	; 253
 95e:	60 83       	st	Z, r22
 960:	e1 e3       	ldi	r30, 0x31	; 49
 962:	f1 e0       	ldi	r31, 0x01	; 1
 964:	80 81       	ld	r24, Z
 966:	80 62       	ori	r24, 0x20	; 32
 968:	80 83       	st	Z, r24
 96a:	08 95       	ret

0000096c <UART_puts>:
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	eb 01       	movw	r28, r22
 974:	68 81       	ld	r22, Y
 976:	66 23       	and	r22, r22
 978:	39 f0       	breq	.+14     	; 0x988 <UART_puts+0x1c>
 97a:	18 2f       	mov	r17, r24
 97c:	21 96       	adiw	r28, 0x01	; 1
 97e:	81 2f       	mov	r24, r17
 980:	73 df       	rcall	.-282    	; 0x868 <UART_putchar>
 982:	69 91       	ld	r22, Y+
 984:	61 11       	cpse	r22, r1
 986:	fb cf       	rjmp	.-10     	; 0x97e <UART_puts+0x12>
 988:	df 91       	pop	r29
 98a:	cf 91       	pop	r28
 98c:	1f 91       	pop	r17
 98e:	08 95       	ret

00000990 <UART_getchar>:
 990:	81 30       	cpi	r24, 0x01	; 1
 992:	c9 f0       	breq	.+50     	; 0x9c6 <UART_getchar+0x36>
 994:	28 f0       	brcs	.+10     	; 0x9a0 <UART_getchar+0x10>
 996:	82 30       	cpi	r24, 0x02	; 2
 998:	49 f1       	breq	.+82     	; 0x9ec <UART_getchar+0x5c>
 99a:	83 30       	cpi	r24, 0x03	; 3
 99c:	d1 f1       	breq	.+116    	; 0xa12 <UART_getchar+0x82>
 99e:	4c c0       	rjmp	.+152    	; 0xa38 <UART_getchar+0xa8>
 9a0:	a1 e6       	ldi	r26, 0x61	; 97
 9a2:	b3 e0       	ldi	r27, 0x03	; 3
 9a4:	e2 e6       	ldi	r30, 0x62	; 98
 9a6:	f3 e0       	ldi	r31, 0x03	; 3
 9a8:	9c 91       	ld	r25, X
 9aa:	80 81       	ld	r24, Z
 9ac:	98 17       	cp	r25, r24
 9ae:	e1 f3       	breq	.-8      	; 0x9a8 <UART_getchar+0x18>
 9b0:	a2 e6       	ldi	r26, 0x62	; 98
 9b2:	b3 e0       	ldi	r27, 0x03	; 3
 9b4:	ec 91       	ld	r30, X
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	8e 0f       	add	r24, r30
 9ba:	8c 93       	st	X, r24
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	ef 5d       	subi	r30, 0xDF	; 223
 9c0:	fc 4f       	sbci	r31, 0xFC	; 252
 9c2:	80 81       	ld	r24, Z
 9c4:	08 95       	ret
 9c6:	a7 e2       	ldi	r26, 0x27	; 39
 9c8:	b4 e0       	ldi	r27, 0x04	; 4
 9ca:	e8 e2       	ldi	r30, 0x28	; 40
 9cc:	f4 e0       	ldi	r31, 0x04	; 4
 9ce:	9c 91       	ld	r25, X
 9d0:	80 81       	ld	r24, Z
 9d2:	98 17       	cp	r25, r24
 9d4:	e1 f3       	breq	.-8      	; 0x9ce <UART_getchar+0x3e>
 9d6:	a8 e2       	ldi	r26, 0x28	; 40
 9d8:	b4 e0       	ldi	r27, 0x04	; 4
 9da:	ec 91       	ld	r30, X
 9dc:	81 e0       	ldi	r24, 0x01	; 1
 9de:	8e 0f       	add	r24, r30
 9e0:	8c 93       	st	X, r24
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	e9 51       	subi	r30, 0x19	; 25
 9e6:	fc 4f       	sbci	r31, 0xFC	; 252
 9e8:	80 81       	ld	r24, Z
 9ea:	08 95       	ret
 9ec:	ad ed       	ldi	r26, 0xDD	; 221
 9ee:	b2 e0       	ldi	r27, 0x02	; 2
 9f0:	ee ed       	ldi	r30, 0xDE	; 222
 9f2:	f2 e0       	ldi	r31, 0x02	; 2
 9f4:	9c 91       	ld	r25, X
 9f6:	80 81       	ld	r24, Z
 9f8:	98 17       	cp	r25, r24
 9fa:	e1 f3       	breq	.-8      	; 0x9f4 <UART_getchar+0x64>
 9fc:	ae ed       	ldi	r26, 0xDE	; 222
 9fe:	b2 e0       	ldi	r27, 0x02	; 2
 a00:	ec 91       	ld	r30, X
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	8e 0f       	add	r24, r30
 a06:	8c 93       	st	X, r24
 a08:	f0 e0       	ldi	r31, 0x00	; 0
 a0a:	e3 56       	subi	r30, 0x63	; 99
 a0c:	fd 4f       	sbci	r31, 0xFD	; 253
 a0e:	80 81       	ld	r24, Z
 a10:	08 95       	ret
 a12:	a9 e6       	ldi	r26, 0x69	; 105
 a14:	b4 e0       	ldi	r27, 0x04	; 4
 a16:	ea e6       	ldi	r30, 0x6A	; 106
 a18:	f4 e0       	ldi	r31, 0x04	; 4
 a1a:	9c 91       	ld	r25, X
 a1c:	80 81       	ld	r24, Z
 a1e:	98 17       	cp	r25, r24
 a20:	e1 f3       	breq	.-8      	; 0xa1a <UART_getchar+0x8a>
 a22:	aa e6       	ldi	r26, 0x6A	; 106
 a24:	b4 e0       	ldi	r27, 0x04	; 4
 a26:	ec 91       	ld	r30, X
 a28:	81 e0       	ldi	r24, 0x01	; 1
 a2a:	8e 0f       	add	r24, r30
 a2c:	8c 93       	st	X, r24
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	e7 5d       	subi	r30, 0xD7	; 215
 a32:	fb 4f       	sbci	r31, 0xFB	; 251
 a34:	80 81       	ld	r24, Z
 a36:	08 95       	ret
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	08 95       	ret

00000a3c <UART_clrscr>:
 a3c:	68 e2       	ldi	r22, 0x28	; 40
 a3e:	72 e0       	ldi	r23, 0x02	; 2
 a40:	95 cf       	rjmp	.-214    	; 0x96c <UART_puts>
 a42:	08 95       	ret

00000a44 <itoa>:
 a44:	0f 93       	push	r16
 a46:	1f 93       	push	r17
 a48:	cf 93       	push	r28
 a4a:	df 93       	push	r29
 a4c:	ec 01       	movw	r28, r24
 a4e:	fb 01       	movw	r30, r22
 a50:	89 2b       	or	r24, r25
 a52:	21 f4       	brne	.+8      	; 0xa5c <itoa+0x18>
 a54:	80 e3       	ldi	r24, 0x30	; 48
 a56:	80 83       	st	Z, r24
 a58:	11 82       	std	Z+1, r1	; 0x01
 a5a:	30 c0       	rjmp	.+96     	; 0xabc <itoa+0x78>
 a5c:	20 e0       	ldi	r18, 0x00	; 0
 a5e:	04 2f       	mov	r16, r20
 a60:	10 e0       	ldi	r17, 0x00	; 0
 a62:	01 c0       	rjmp	.+2      	; 0xa66 <itoa+0x22>
 a64:	23 2f       	mov	r18, r19
 a66:	ce 01       	movw	r24, r28
 a68:	b8 01       	movw	r22, r16
 a6a:	12 d2       	rcall	.+1060   	; 0xe90 <__udivmodhi4>
 a6c:	bc 01       	movw	r22, r24
 a6e:	0a 97       	sbiw	r24, 0x0a	; 10
 a70:	10 f0       	brcs	.+4      	; 0xa76 <itoa+0x32>
 a72:	69 5f       	subi	r22, 0xF9	; 249
 a74:	7f 4f       	sbci	r23, 0xFF	; 255
 a76:	31 e0       	ldi	r19, 0x01	; 1
 a78:	32 0f       	add	r19, r18
 a7a:	60 5d       	subi	r22, 0xD0	; 208
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	df 01       	movw	r26, r30
 a80:	a2 0f       	add	r26, r18
 a82:	b1 1d       	adc	r27, r1
 a84:	6c 93       	st	X, r22
 a86:	ce 01       	movw	r24, r28
 a88:	b8 01       	movw	r22, r16
 a8a:	02 d2       	rcall	.+1028   	; 0xe90 <__udivmodhi4>
 a8c:	eb 01       	movw	r28, r22
 a8e:	df 01       	movw	r26, r30
 a90:	a3 0f       	add	r26, r19
 a92:	b1 1d       	adc	r27, r1
 a94:	1c 92       	st	X, r1
 a96:	20 97       	sbiw	r28, 0x00	; 0
 a98:	29 f7       	brne	.-54     	; 0xa64 <itoa+0x20>
 a9a:	22 23       	and	r18, r18
 a9c:	79 f0       	breq	.+30     	; 0xabc <itoa+0x78>
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	ef 01       	movw	r28, r30
 aa2:	c8 0f       	add	r28, r24
 aa4:	d1 1d       	adc	r29, r1
 aa6:	98 81       	ld	r25, Y
 aa8:	df 01       	movw	r26, r30
 aaa:	a2 0f       	add	r26, r18
 aac:	b1 1d       	adc	r27, r1
 aae:	3c 91       	ld	r19, X
 ab0:	38 83       	st	Y, r19
 ab2:	9c 93       	st	X, r25
 ab4:	8f 5f       	subi	r24, 0xFF	; 255
 ab6:	21 50       	subi	r18, 0x01	; 1
 ab8:	82 17       	cp	r24, r18
 aba:	90 f3       	brcs	.-28     	; 0xaa0 <itoa+0x5c>
 abc:	df 91       	pop	r29
 abe:	cf 91       	pop	r28
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	08 95       	ret

00000ac6 <UART_gotoxy>:
 ac6:	0f 93       	push	r16
 ac8:	1f 93       	push	r17
 aca:	cf 93       	push	r28
 acc:	df 93       	push	r29
 ace:	cd b7       	in	r28, 0x3d	; 61
 ad0:	de b7       	in	r29, 0x3e	; 62
 ad2:	60 97       	sbiw	r28, 0x10	; 16
 ad4:	0f b6       	in	r0, 0x3f	; 63
 ad6:	f8 94       	cli
 ad8:	de bf       	out	0x3e, r29	; 62
 ada:	0f be       	out	0x3f, r0	; 63
 adc:	cd bf       	out	0x3d, r28	; 61
 ade:	18 2f       	mov	r17, r24
 ae0:	86 2f       	mov	r24, r22
 ae2:	04 2f       	mov	r16, r20
 ae4:	4a e0       	ldi	r20, 0x0A	; 10
 ae6:	be 01       	movw	r22, r28
 ae8:	6f 5f       	subi	r22, 0xFF	; 255
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	aa df       	rcall	.-172    	; 0xa44 <itoa>
 af0:	4a e0       	ldi	r20, 0x0A	; 10
 af2:	be 01       	movw	r22, r28
 af4:	67 5f       	subi	r22, 0xF7	; 247
 af6:	7f 4f       	sbci	r23, 0xFF	; 255
 af8:	80 2f       	mov	r24, r16
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	a3 df       	rcall	.-186    	; 0xa44 <itoa>
 afe:	6d e2       	ldi	r22, 0x2D	; 45
 b00:	72 e0       	ldi	r23, 0x02	; 2
 b02:	81 2f       	mov	r24, r17
 b04:	33 df       	rcall	.-410    	; 0x96c <UART_puts>
 b06:	be 01       	movw	r22, r28
 b08:	67 5f       	subi	r22, 0xF7	; 247
 b0a:	7f 4f       	sbci	r23, 0xFF	; 255
 b0c:	81 2f       	mov	r24, r17
 b0e:	2e df       	rcall	.-420    	; 0x96c <UART_puts>
 b10:	65 e3       	ldi	r22, 0x35	; 53
 b12:	72 e0       	ldi	r23, 0x02	; 2
 b14:	81 2f       	mov	r24, r17
 b16:	2a df       	rcall	.-428    	; 0x96c <UART_puts>
 b18:	be 01       	movw	r22, r28
 b1a:	6f 5f       	subi	r22, 0xFF	; 255
 b1c:	7f 4f       	sbci	r23, 0xFF	; 255
 b1e:	81 2f       	mov	r24, r17
 b20:	25 df       	rcall	.-438    	; 0x96c <UART_puts>
 b22:	67 e3       	ldi	r22, 0x37	; 55
 b24:	72 e0       	ldi	r23, 0x02	; 2
 b26:	81 2f       	mov	r24, r17
 b28:	21 df       	rcall	.-446    	; 0x96c <UART_puts>
 b2a:	60 96       	adiw	r28, 0x10	; 16
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	f8 94       	cli
 b30:	de bf       	out	0x3e, r29	; 62
 b32:	0f be       	out	0x3f, r0	; 63
 b34:	cd bf       	out	0x3d, r28	; 61
 b36:	df 91       	pop	r29
 b38:	cf 91       	pop	r28
 b3a:	1f 91       	pop	r17
 b3c:	0f 91       	pop	r16
 b3e:	08 95       	ret

00000b40 <__vector_25>:

// ISRs
//ISR( USARTx_RX_vect )
ISR( USART0_RX_vect ){ //Rutina de servicio de interrupción para el evento de recepción completa. Esta rutina inserta a la cola circular el dato que fue recibido por el UARTx.
 b40:	1f 92       	push	r1
 b42:	0f 92       	push	r0
 b44:	0f b6       	in	r0, 0x3f	; 63
 b46:	0f 92       	push	r0
 b48:	11 24       	eor	r1, r1
 b4a:	0b b6       	in	r0, 0x3b	; 59
 b4c:	0f 92       	push	r0
 b4e:	2f 93       	push	r18
 b50:	3f 93       	push	r19
 b52:	8f 93       	push	r24
 b54:	9f 93       	push	r25
 b56:	af 93       	push	r26
 b58:	bf 93       	push	r27
 b5a:	ef 93       	push	r30
 b5c:	ff 93       	push	r31
	while(IF_BUFFER_FULL(buffer_rx0));
 b5e:	a1 e6       	ldi	r26, 0x61	; 97
 b60:	b3 e0       	ldi	r27, 0x03	; 3
 b62:	e2 e6       	ldi	r30, 0x62	; 98
 b64:	f3 e0       	ldi	r31, 0x03	; 3
 b66:	2c 91       	ld	r18, X
 b68:	80 81       	ld	r24, Z
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	01 97       	sbiw	r24, 0x01	; 1
 b70:	8f 73       	andi	r24, 0x3F	; 63
 b72:	99 27       	eor	r25, r25
 b74:	28 17       	cp	r18, r24
 b76:	39 07       	cpc	r19, r25
 b78:	b1 f3       	breq	.-20     	; 0xb66 <__vector_25+0x26>
	
	buffer_rx0.buffer[buffer_rx0.in_idx++] = UDR0;
 b7a:	a1 e6       	ldi	r26, 0x61	; 97
 b7c:	b3 e0       	ldi	r27, 0x03	; 3
 b7e:	ec 91       	ld	r30, X
 b80:	81 e0       	ldi	r24, 0x01	; 1
 b82:	8e 0f       	add	r24, r30
 b84:	8c 93       	st	X, r24
 b86:	f0 e0       	ldi	r31, 0x00	; 0
 b88:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 b8c:	ef 5d       	subi	r30, 0xDF	; 223
 b8e:	fc 4f       	sbci	r31, 0xFC	; 252
 b90:	80 83       	st	Z, r24
}
 b92:	ff 91       	pop	r31
 b94:	ef 91       	pop	r30
 b96:	bf 91       	pop	r27
 b98:	af 91       	pop	r26
 b9a:	9f 91       	pop	r25
 b9c:	8f 91       	pop	r24
 b9e:	3f 91       	pop	r19
 ba0:	2f 91       	pop	r18
 ba2:	0f 90       	pop	r0
 ba4:	0b be       	out	0x3b, r0	; 59
 ba6:	0f 90       	pop	r0
 ba8:	0f be       	out	0x3f, r0	; 63
 baa:	0f 90       	pop	r0
 bac:	1f 90       	pop	r1
 bae:	18 95       	reti

00000bb0 <__vector_36>:

ISR( USART1_RX_vect ){
 bb0:	1f 92       	push	r1
 bb2:	0f 92       	push	r0
 bb4:	0f b6       	in	r0, 0x3f	; 63
 bb6:	0f 92       	push	r0
 bb8:	11 24       	eor	r1, r1
 bba:	0b b6       	in	r0, 0x3b	; 59
 bbc:	0f 92       	push	r0
 bbe:	2f 93       	push	r18
 bc0:	3f 93       	push	r19
 bc2:	8f 93       	push	r24
 bc4:	9f 93       	push	r25
 bc6:	af 93       	push	r26
 bc8:	bf 93       	push	r27
 bca:	ef 93       	push	r30
 bcc:	ff 93       	push	r31
	while(IF_BUFFER_FULL(buffer_rx1));
 bce:	a7 e2       	ldi	r26, 0x27	; 39
 bd0:	b4 e0       	ldi	r27, 0x04	; 4
 bd2:	e8 e2       	ldi	r30, 0x28	; 40
 bd4:	f4 e0       	ldi	r31, 0x04	; 4
 bd6:	2c 91       	ld	r18, X
 bd8:	80 81       	ld	r24, Z
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	01 97       	sbiw	r24, 0x01	; 1
 be0:	8f 73       	andi	r24, 0x3F	; 63
 be2:	99 27       	eor	r25, r25
 be4:	28 17       	cp	r18, r24
 be6:	39 07       	cpc	r19, r25
 be8:	b1 f3       	breq	.-20     	; 0xbd6 <__vector_36+0x26>
	
	buffer_rx1.buffer[buffer_rx1.in_idx++] = UDR1;
 bea:	a7 e2       	ldi	r26, 0x27	; 39
 bec:	b4 e0       	ldi	r27, 0x04	; 4
 bee:	ec 91       	ld	r30, X
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	8e 0f       	add	r24, r30
 bf4:	8c 93       	st	X, r24
 bf6:	f0 e0       	ldi	r31, 0x00	; 0
 bf8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 bfc:	e9 51       	subi	r30, 0x19	; 25
 bfe:	fc 4f       	sbci	r31, 0xFC	; 252
 c00:	80 83       	st	Z, r24
}
 c02:	ff 91       	pop	r31
 c04:	ef 91       	pop	r30
 c06:	bf 91       	pop	r27
 c08:	af 91       	pop	r26
 c0a:	9f 91       	pop	r25
 c0c:	8f 91       	pop	r24
 c0e:	3f 91       	pop	r19
 c10:	2f 91       	pop	r18
 c12:	0f 90       	pop	r0
 c14:	0b be       	out	0x3b, r0	; 59
 c16:	0f 90       	pop	r0
 c18:	0f be       	out	0x3f, r0	; 63
 c1a:	0f 90       	pop	r0
 c1c:	1f 90       	pop	r1
 c1e:	18 95       	reti

00000c20 <__vector_51>:

ISR( USART2_RX_vect ){
 c20:	1f 92       	push	r1
 c22:	0f 92       	push	r0
 c24:	0f b6       	in	r0, 0x3f	; 63
 c26:	0f 92       	push	r0
 c28:	11 24       	eor	r1, r1
 c2a:	0b b6       	in	r0, 0x3b	; 59
 c2c:	0f 92       	push	r0
 c2e:	2f 93       	push	r18
 c30:	3f 93       	push	r19
 c32:	8f 93       	push	r24
 c34:	9f 93       	push	r25
 c36:	af 93       	push	r26
 c38:	bf 93       	push	r27
 c3a:	ef 93       	push	r30
 c3c:	ff 93       	push	r31
	while(IF_BUFFER_FULL(buffer_rx2));
 c3e:	ad ed       	ldi	r26, 0xDD	; 221
 c40:	b2 e0       	ldi	r27, 0x02	; 2
 c42:	ee ed       	ldi	r30, 0xDE	; 222
 c44:	f2 e0       	ldi	r31, 0x02	; 2
 c46:	2c 91       	ld	r18, X
 c48:	80 81       	ld	r24, Z
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	01 97       	sbiw	r24, 0x01	; 1
 c50:	8f 73       	andi	r24, 0x3F	; 63
 c52:	99 27       	eor	r25, r25
 c54:	28 17       	cp	r18, r24
 c56:	39 07       	cpc	r19, r25
 c58:	b1 f3       	breq	.-20     	; 0xc46 <__vector_51+0x26>
	
	buffer_rx2.buffer[buffer_rx2.in_idx++] = UDR2;
 c5a:	ad ed       	ldi	r26, 0xDD	; 221
 c5c:	b2 e0       	ldi	r27, 0x02	; 2
 c5e:	ec 91       	ld	r30, X
 c60:	81 e0       	ldi	r24, 0x01	; 1
 c62:	8e 0f       	add	r24, r30
 c64:	8c 93       	st	X, r24
 c66:	f0 e0       	ldi	r31, 0x00	; 0
 c68:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 c6c:	e3 56       	subi	r30, 0x63	; 99
 c6e:	fd 4f       	sbci	r31, 0xFD	; 253
 c70:	80 83       	st	Z, r24
}
 c72:	ff 91       	pop	r31
 c74:	ef 91       	pop	r30
 c76:	bf 91       	pop	r27
 c78:	af 91       	pop	r26
 c7a:	9f 91       	pop	r25
 c7c:	8f 91       	pop	r24
 c7e:	3f 91       	pop	r19
 c80:	2f 91       	pop	r18
 c82:	0f 90       	pop	r0
 c84:	0b be       	out	0x3b, r0	; 59
 c86:	0f 90       	pop	r0
 c88:	0f be       	out	0x3f, r0	; 63
 c8a:	0f 90       	pop	r0
 c8c:	1f 90       	pop	r1
 c8e:	18 95       	reti

00000c90 <__vector_54>:

ISR( USART3_RX_vect ){
 c90:	1f 92       	push	r1
 c92:	0f 92       	push	r0
 c94:	0f b6       	in	r0, 0x3f	; 63
 c96:	0f 92       	push	r0
 c98:	11 24       	eor	r1, r1
 c9a:	0b b6       	in	r0, 0x3b	; 59
 c9c:	0f 92       	push	r0
 c9e:	2f 93       	push	r18
 ca0:	3f 93       	push	r19
 ca2:	8f 93       	push	r24
 ca4:	9f 93       	push	r25
 ca6:	af 93       	push	r26
 ca8:	bf 93       	push	r27
 caa:	ef 93       	push	r30
 cac:	ff 93       	push	r31
	while(IF_BUFFER_FULL(buffer_rx3));
 cae:	a9 e6       	ldi	r26, 0x69	; 105
 cb0:	b4 e0       	ldi	r27, 0x04	; 4
 cb2:	ea e6       	ldi	r30, 0x6A	; 106
 cb4:	f4 e0       	ldi	r31, 0x04	; 4
 cb6:	2c 91       	ld	r18, X
 cb8:	80 81       	ld	r24, Z
 cba:	30 e0       	ldi	r19, 0x00	; 0
 cbc:	90 e0       	ldi	r25, 0x00	; 0
 cbe:	01 97       	sbiw	r24, 0x01	; 1
 cc0:	8f 73       	andi	r24, 0x3F	; 63
 cc2:	99 27       	eor	r25, r25
 cc4:	28 17       	cp	r18, r24
 cc6:	39 07       	cpc	r19, r25
 cc8:	b1 f3       	breq	.-20     	; 0xcb6 <__vector_54+0x26>
	
	buffer_rx3.buffer[buffer_rx3.in_idx++] = UDR3;
 cca:	a9 e6       	ldi	r26, 0x69	; 105
 ccc:	b4 e0       	ldi	r27, 0x04	; 4
 cce:	ec 91       	ld	r30, X
 cd0:	81 e0       	ldi	r24, 0x01	; 1
 cd2:	8e 0f       	add	r24, r30
 cd4:	8c 93       	st	X, r24
 cd6:	f0 e0       	ldi	r31, 0x00	; 0
 cd8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 cdc:	e7 5d       	subi	r30, 0xD7	; 215
 cde:	fb 4f       	sbci	r31, 0xFB	; 251
 ce0:	80 83       	st	Z, r24
}
 ce2:	ff 91       	pop	r31
 ce4:	ef 91       	pop	r30
 ce6:	bf 91       	pop	r27
 ce8:	af 91       	pop	r26
 cea:	9f 91       	pop	r25
 cec:	8f 91       	pop	r24
 cee:	3f 91       	pop	r19
 cf0:	2f 91       	pop	r18
 cf2:	0f 90       	pop	r0
 cf4:	0b be       	out	0x3b, r0	; 59
 cf6:	0f 90       	pop	r0
 cf8:	0f be       	out	0x3f, r0	; 63
 cfa:	0f 90       	pop	r0
 cfc:	1f 90       	pop	r1
 cfe:	18 95       	reti

00000d00 <__vector_26>:

//ISR( USARTx_UDRE_vect )
ISR( USART0_UDRE_vect ){
 d00:	1f 92       	push	r1
 d02:	0f 92       	push	r0
 d04:	0f b6       	in	r0, 0x3f	; 63
 d06:	0f 92       	push	r0
 d08:	11 24       	eor	r1, r1
 d0a:	0b b6       	in	r0, 0x3b	; 59
 d0c:	0f 92       	push	r0
 d0e:	8f 93       	push	r24
 d10:	9f 93       	push	r25
 d12:	af 93       	push	r26
 d14:	bf 93       	push	r27
 d16:	ef 93       	push	r30
 d18:	ff 93       	push	r31
	if(IF_BUFFER_EMPTY(buffer_tx0)){
 d1a:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <buffer_tx0+0x40>
 d1e:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <buffer_tx0+0x41>
 d22:	98 13       	cpse	r25, r24
 d24:	06 c0       	rjmp	.+12     	; 0xd32 <__vector_26+0x32>
		UCSR0B &= (~(1<<UDRIE0));
 d26:	e1 ec       	ldi	r30, 0xC1	; 193
 d28:	f0 e0       	ldi	r31, 0x00	; 0
 d2a:	80 81       	ld	r24, Z
 d2c:	8f 7d       	andi	r24, 0xDF	; 223
 d2e:	80 83       	st	Z, r24
 d30:	0c c0       	rjmp	.+24     	; 0xd4a <__vector_26+0x4a>
	}
	else{
		UDR0=buffer_tx0.buffer[buffer_tx0.out_idx++];
 d32:	ac e9       	ldi	r26, 0x9C	; 156
 d34:	b2 e0       	ldi	r27, 0x02	; 2
 d36:	ec 91       	ld	r30, X
 d38:	81 e0       	ldi	r24, 0x01	; 1
 d3a:	8e 0f       	add	r24, r30
 d3c:	8c 93       	st	X, r24
 d3e:	f0 e0       	ldi	r31, 0x00	; 0
 d40:	e5 5a       	subi	r30, 0xA5	; 165
 d42:	fd 4f       	sbci	r31, 0xFD	; 253
 d44:	80 81       	ld	r24, Z
 d46:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
 d4a:	ff 91       	pop	r31
 d4c:	ef 91       	pop	r30
 d4e:	bf 91       	pop	r27
 d50:	af 91       	pop	r26
 d52:	9f 91       	pop	r25
 d54:	8f 91       	pop	r24
 d56:	0f 90       	pop	r0
 d58:	0b be       	out	0x3b, r0	; 59
 d5a:	0f 90       	pop	r0
 d5c:	0f be       	out	0x3f, r0	; 63
 d5e:	0f 90       	pop	r0
 d60:	1f 90       	pop	r1
 d62:	18 95       	reti

00000d64 <__vector_37>:

ISR( USART1_UDRE_vect ){
 d64:	1f 92       	push	r1
 d66:	0f 92       	push	r0
 d68:	0f b6       	in	r0, 0x3f	; 63
 d6a:	0f 92       	push	r0
 d6c:	11 24       	eor	r1, r1
 d6e:	0b b6       	in	r0, 0x3b	; 59
 d70:	0f 92       	push	r0
 d72:	8f 93       	push	r24
 d74:	9f 93       	push	r25
 d76:	af 93       	push	r26
 d78:	bf 93       	push	r27
 d7a:	ef 93       	push	r30
 d7c:	ff 93       	push	r31
	if(IF_BUFFER_EMPTY(buffer_tx1)){
 d7e:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <buffer_tx1+0x40>
 d82:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <buffer_tx1+0x41>
 d86:	98 13       	cpse	r25, r24
 d88:	06 c0       	rjmp	.+12     	; 0xd96 <__vector_37+0x32>
		UCSR1B &= (~(1<<UDRIE1));
 d8a:	e9 ec       	ldi	r30, 0xC9	; 201
 d8c:	f0 e0       	ldi	r31, 0x00	; 0
 d8e:	80 81       	ld	r24, Z
 d90:	8f 7d       	andi	r24, 0xDF	; 223
 d92:	80 83       	st	Z, r24
 d94:	0c c0       	rjmp	.+24     	; 0xdae <__vector_37+0x4a>
	}
	else{
		UDR1=buffer_tx1.buffer[buffer_tx1.out_idx++];
 d96:	a4 ea       	ldi	r26, 0xA4	; 164
 d98:	b3 e0       	ldi	r27, 0x03	; 3
 d9a:	ec 91       	ld	r30, X
 d9c:	81 e0       	ldi	r24, 0x01	; 1
 d9e:	8e 0f       	add	r24, r30
 da0:	8c 93       	st	X, r24
 da2:	f0 e0       	ldi	r31, 0x00	; 0
 da4:	ed 59       	subi	r30, 0x9D	; 157
 da6:	fc 4f       	sbci	r31, 0xFC	; 252
 da8:	80 81       	ld	r24, Z
 daa:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
 dae:	ff 91       	pop	r31
 db0:	ef 91       	pop	r30
 db2:	bf 91       	pop	r27
 db4:	af 91       	pop	r26
 db6:	9f 91       	pop	r25
 db8:	8f 91       	pop	r24
 dba:	0f 90       	pop	r0
 dbc:	0b be       	out	0x3b, r0	; 59
 dbe:	0f 90       	pop	r0
 dc0:	0f be       	out	0x3f, r0	; 63
 dc2:	0f 90       	pop	r0
 dc4:	1f 90       	pop	r1
 dc6:	18 95       	reti

00000dc8 <__vector_52>:

ISR( USART2_UDRE_vect ){
 dc8:	1f 92       	push	r1
 dca:	0f 92       	push	r0
 dcc:	0f b6       	in	r0, 0x3f	; 63
 dce:	0f 92       	push	r0
 dd0:	11 24       	eor	r1, r1
 dd2:	0b b6       	in	r0, 0x3b	; 59
 dd4:	0f 92       	push	r0
 dd6:	8f 93       	push	r24
 dd8:	9f 93       	push	r25
 dda:	af 93       	push	r26
 ddc:	bf 93       	push	r27
 dde:	ef 93       	push	r30
 de0:	ff 93       	push	r31
	if(IF_BUFFER_EMPTY(buffer_tx2)){
 de2:	90 91 ab 04 	lds	r25, 0x04AB	; 0x8004ab <buffer_tx2+0x40>
 de6:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <buffer_tx2+0x41>
 dea:	98 13       	cpse	r25, r24
 dec:	06 c0       	rjmp	.+12     	; 0xdfa <__vector_52+0x32>
		UCSR2B &= (~(1<<UDRIE2));
 dee:	e1 ed       	ldi	r30, 0xD1	; 209
 df0:	f0 e0       	ldi	r31, 0x00	; 0
 df2:	80 81       	ld	r24, Z
 df4:	8f 7d       	andi	r24, 0xDF	; 223
 df6:	80 83       	st	Z, r24
 df8:	0c c0       	rjmp	.+24     	; 0xe12 <__vector_52+0x4a>
	}
	else{
		UDR2=buffer_tx2.buffer[buffer_tx2.out_idx++];
 dfa:	ac ea       	ldi	r26, 0xAC	; 172
 dfc:	b4 e0       	ldi	r27, 0x04	; 4
 dfe:	ec 91       	ld	r30, X
 e00:	81 e0       	ldi	r24, 0x01	; 1
 e02:	8e 0f       	add	r24, r30
 e04:	8c 93       	st	X, r24
 e06:	f0 e0       	ldi	r31, 0x00	; 0
 e08:	e5 59       	subi	r30, 0x95	; 149
 e0a:	fb 4f       	sbci	r31, 0xFB	; 251
 e0c:	80 81       	ld	r24, Z
 e0e:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
 e12:	ff 91       	pop	r31
 e14:	ef 91       	pop	r30
 e16:	bf 91       	pop	r27
 e18:	af 91       	pop	r26
 e1a:	9f 91       	pop	r25
 e1c:	8f 91       	pop	r24
 e1e:	0f 90       	pop	r0
 e20:	0b be       	out	0x3b, r0	; 59
 e22:	0f 90       	pop	r0
 e24:	0f be       	out	0x3f, r0	; 63
 e26:	0f 90       	pop	r0
 e28:	1f 90       	pop	r1
 e2a:	18 95       	reti

00000e2c <__vector_55>:

ISR( USART3_UDRE_vect ){
 e2c:	1f 92       	push	r1
 e2e:	0f 92       	push	r0
 e30:	0f b6       	in	r0, 0x3f	; 63
 e32:	0f 92       	push	r0
 e34:	11 24       	eor	r1, r1
 e36:	0b b6       	in	r0, 0x3b	; 59
 e38:	0f 92       	push	r0
 e3a:	8f 93       	push	r24
 e3c:	9f 93       	push	r25
 e3e:	af 93       	push	r26
 e40:	bf 93       	push	r27
 e42:	ef 93       	push	r30
 e44:	ff 93       	push	r31
	if(IF_BUFFER_EMPTY(buffer_tx3)){
 e46:	90 91 1f 03 	lds	r25, 0x031F	; 0x80031f <buffer_tx3+0x40>
 e4a:	80 91 20 03 	lds	r24, 0x0320	; 0x800320 <buffer_tx3+0x41>
 e4e:	98 13       	cpse	r25, r24
 e50:	06 c0       	rjmp	.+12     	; 0xe5e <__vector_55+0x32>
		UCSR3B &= (~(1<<UDRIE3));
 e52:	e1 e3       	ldi	r30, 0x31	; 49
 e54:	f1 e0       	ldi	r31, 0x01	; 1
 e56:	80 81       	ld	r24, Z
 e58:	8f 7d       	andi	r24, 0xDF	; 223
 e5a:	80 83       	st	Z, r24
 e5c:	0c c0       	rjmp	.+24     	; 0xe76 <__vector_55+0x4a>
	}
	else{
		UDR3=buffer_tx3.buffer[buffer_tx3.out_idx++];
 e5e:	a0 e2       	ldi	r26, 0x20	; 32
 e60:	b3 e0       	ldi	r27, 0x03	; 3
 e62:	ec 91       	ld	r30, X
 e64:	81 e0       	ldi	r24, 0x01	; 1
 e66:	8e 0f       	add	r24, r30
 e68:	8c 93       	st	X, r24
 e6a:	f0 e0       	ldi	r31, 0x00	; 0
 e6c:	e1 52       	subi	r30, 0x21	; 33
 e6e:	fd 4f       	sbci	r31, 0xFD	; 253
 e70:	80 81       	ld	r24, Z
 e72:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
 e76:	ff 91       	pop	r31
 e78:	ef 91       	pop	r30
 e7a:	bf 91       	pop	r27
 e7c:	af 91       	pop	r26
 e7e:	9f 91       	pop	r25
 e80:	8f 91       	pop	r24
 e82:	0f 90       	pop	r0
 e84:	0b be       	out	0x3b, r0	; 59
 e86:	0f 90       	pop	r0
 e88:	0f be       	out	0x3f, r0	; 63
 e8a:	0f 90       	pop	r0
 e8c:	1f 90       	pop	r1
 e8e:	18 95       	reti

00000e90 <__udivmodhi4>:
 e90:	aa 1b       	sub	r26, r26
 e92:	bb 1b       	sub	r27, r27
 e94:	51 e1       	ldi	r21, 0x11	; 17
 e96:	07 c0       	rjmp	.+14     	; 0xea6 <__udivmodhi4_ep>

00000e98 <__udivmodhi4_loop>:
 e98:	aa 1f       	adc	r26, r26
 e9a:	bb 1f       	adc	r27, r27
 e9c:	a6 17       	cp	r26, r22
 e9e:	b7 07       	cpc	r27, r23
 ea0:	10 f0       	brcs	.+4      	; 0xea6 <__udivmodhi4_ep>
 ea2:	a6 1b       	sub	r26, r22
 ea4:	b7 0b       	sbc	r27, r23

00000ea6 <__udivmodhi4_ep>:
 ea6:	88 1f       	adc	r24, r24
 ea8:	99 1f       	adc	r25, r25
 eaa:	5a 95       	dec	r21
 eac:	a9 f7       	brne	.-22     	; 0xe98 <__udivmodhi4_loop>
 eae:	80 95       	com	r24
 eb0:	90 95       	com	r25
 eb2:	bc 01       	movw	r22, r24
 eb4:	cd 01       	movw	r24, r26
 eb6:	08 95       	ret

00000eb8 <__udivmodsi4>:
 eb8:	a1 e2       	ldi	r26, 0x21	; 33
 eba:	1a 2e       	mov	r1, r26
 ebc:	aa 1b       	sub	r26, r26
 ebe:	bb 1b       	sub	r27, r27
 ec0:	fd 01       	movw	r30, r26
 ec2:	0d c0       	rjmp	.+26     	; 0xede <__udivmodsi4_ep>

00000ec4 <__udivmodsi4_loop>:
 ec4:	aa 1f       	adc	r26, r26
 ec6:	bb 1f       	adc	r27, r27
 ec8:	ee 1f       	adc	r30, r30
 eca:	ff 1f       	adc	r31, r31
 ecc:	a2 17       	cp	r26, r18
 ece:	b3 07       	cpc	r27, r19
 ed0:	e4 07       	cpc	r30, r20
 ed2:	f5 07       	cpc	r31, r21
 ed4:	20 f0       	brcs	.+8      	; 0xede <__udivmodsi4_ep>
 ed6:	a2 1b       	sub	r26, r18
 ed8:	b3 0b       	sbc	r27, r19
 eda:	e4 0b       	sbc	r30, r20
 edc:	f5 0b       	sbc	r31, r21

00000ede <__udivmodsi4_ep>:
 ede:	66 1f       	adc	r22, r22
 ee0:	77 1f       	adc	r23, r23
 ee2:	88 1f       	adc	r24, r24
 ee4:	99 1f       	adc	r25, r25
 ee6:	1a 94       	dec	r1
 ee8:	69 f7       	brne	.-38     	; 0xec4 <__udivmodsi4_loop>
 eea:	60 95       	com	r22
 eec:	70 95       	com	r23
 eee:	80 95       	com	r24
 ef0:	90 95       	com	r25
 ef2:	9b 01       	movw	r18, r22
 ef4:	ac 01       	movw	r20, r24
 ef6:	bd 01       	movw	r22, r26
 ef8:	cf 01       	movw	r24, r30
 efa:	08 95       	ret

00000efc <__umulhisi3>:
 efc:	a2 9f       	mul	r26, r18
 efe:	b0 01       	movw	r22, r0
 f00:	b3 9f       	mul	r27, r19
 f02:	c0 01       	movw	r24, r0
 f04:	a3 9f       	mul	r26, r19
 f06:	70 0d       	add	r23, r0
 f08:	81 1d       	adc	r24, r1
 f0a:	11 24       	eor	r1, r1
 f0c:	91 1d       	adc	r25, r1
 f0e:	b2 9f       	mul	r27, r18
 f10:	70 0d       	add	r23, r0
 f12:	81 1d       	adc	r24, r1
 f14:	11 24       	eor	r1, r1
 f16:	91 1d       	adc	r25, r1
 f18:	08 95       	ret

00000f1a <__umoddi3>:
 f1a:	68 94       	set
 f1c:	01 c0       	rjmp	.+2      	; 0xf20 <__udivdi3_umoddi3>

00000f1e <__udivdi3>:
 f1e:	e8 94       	clt

00000f20 <__udivdi3_umoddi3>:
 f20:	8f 92       	push	r8
 f22:	9f 92       	push	r9
 f24:	cf 93       	push	r28
 f26:	df 93       	push	r29
 f28:	05 d0       	rcall	.+10     	; 0xf34 <__udivmod64>
 f2a:	df 91       	pop	r29
 f2c:	cf 91       	pop	r28
 f2e:	9f 90       	pop	r9
 f30:	8f 90       	pop	r8
 f32:	08 95       	ret

00000f34 <__udivmod64>:
 f34:	88 24       	eor	r8, r8
 f36:	99 24       	eor	r9, r9
 f38:	f4 01       	movw	r30, r8
 f3a:	e4 01       	movw	r28, r8
 f3c:	b0 e4       	ldi	r27, 0x40	; 64
 f3e:	9f 93       	push	r25
 f40:	aa 27       	eor	r26, r26
 f42:	9a 15       	cp	r25, r10
 f44:	8b 04       	cpc	r8, r11
 f46:	9c 04       	cpc	r9, r12
 f48:	ed 05       	cpc	r30, r13
 f4a:	fe 05       	cpc	r31, r14
 f4c:	cf 05       	cpc	r28, r15
 f4e:	d0 07       	cpc	r29, r16
 f50:	a1 07       	cpc	r26, r17
 f52:	98 f4       	brcc	.+38     	; 0xf7a <__udivmod64+0x46>
 f54:	ad 2f       	mov	r26, r29
 f56:	dc 2f       	mov	r29, r28
 f58:	cf 2f       	mov	r28, r31
 f5a:	fe 2f       	mov	r31, r30
 f5c:	e9 2d       	mov	r30, r9
 f5e:	98 2c       	mov	r9, r8
 f60:	89 2e       	mov	r8, r25
 f62:	98 2f       	mov	r25, r24
 f64:	87 2f       	mov	r24, r23
 f66:	76 2f       	mov	r23, r22
 f68:	65 2f       	mov	r22, r21
 f6a:	54 2f       	mov	r21, r20
 f6c:	43 2f       	mov	r20, r19
 f6e:	32 2f       	mov	r19, r18
 f70:	22 27       	eor	r18, r18
 f72:	b8 50       	subi	r27, 0x08	; 8
 f74:	31 f7       	brne	.-52     	; 0xf42 <__udivmod64+0xe>
 f76:	bf 91       	pop	r27
 f78:	27 c0       	rjmp	.+78     	; 0xfc8 <__udivmod64+0x94>
 f7a:	1b 2e       	mov	r1, r27
 f7c:	bf 91       	pop	r27
 f7e:	bb 27       	eor	r27, r27
 f80:	22 0f       	add	r18, r18
 f82:	33 1f       	adc	r19, r19
 f84:	44 1f       	adc	r20, r20
 f86:	55 1f       	adc	r21, r21
 f88:	66 1f       	adc	r22, r22
 f8a:	77 1f       	adc	r23, r23
 f8c:	88 1f       	adc	r24, r24
 f8e:	99 1f       	adc	r25, r25
 f90:	88 1c       	adc	r8, r8
 f92:	99 1c       	adc	r9, r9
 f94:	ee 1f       	adc	r30, r30
 f96:	ff 1f       	adc	r31, r31
 f98:	cc 1f       	adc	r28, r28
 f9a:	dd 1f       	adc	r29, r29
 f9c:	aa 1f       	adc	r26, r26
 f9e:	bb 1f       	adc	r27, r27
 fa0:	8a 14       	cp	r8, r10
 fa2:	9b 04       	cpc	r9, r11
 fa4:	ec 05       	cpc	r30, r12
 fa6:	fd 05       	cpc	r31, r13
 fa8:	ce 05       	cpc	r28, r14
 faa:	df 05       	cpc	r29, r15
 fac:	a0 07       	cpc	r26, r16
 fae:	b1 07       	cpc	r27, r17
 fb0:	48 f0       	brcs	.+18     	; 0xfc4 <__udivmod64+0x90>
 fb2:	8a 18       	sub	r8, r10
 fb4:	9b 08       	sbc	r9, r11
 fb6:	ec 09       	sbc	r30, r12
 fb8:	fd 09       	sbc	r31, r13
 fba:	ce 09       	sbc	r28, r14
 fbc:	df 09       	sbc	r29, r15
 fbe:	a0 0b       	sbc	r26, r16
 fc0:	b1 0b       	sbc	r27, r17
 fc2:	21 60       	ori	r18, 0x01	; 1
 fc4:	1a 94       	dec	r1
 fc6:	e1 f6       	brne	.-72     	; 0xf80 <__udivmod64+0x4c>
 fc8:	2e f4       	brtc	.+10     	; 0xfd4 <__udivmod64+0xa0>
 fca:	94 01       	movw	r18, r8
 fcc:	af 01       	movw	r20, r30
 fce:	be 01       	movw	r22, r28
 fd0:	cd 01       	movw	r24, r26
 fd2:	00 0c       	add	r0, r0
 fd4:	08 95       	ret

00000fd6 <__adddi3_s8>:
 fd6:	00 24       	eor	r0, r0
 fd8:	a7 fd       	sbrc	r26, 7
 fda:	00 94       	com	r0
 fdc:	2a 0f       	add	r18, r26
 fde:	30 1d       	adc	r19, r0
 fe0:	40 1d       	adc	r20, r0
 fe2:	50 1d       	adc	r21, r0
 fe4:	60 1d       	adc	r22, r0
 fe6:	70 1d       	adc	r23, r0
 fe8:	80 1d       	adc	r24, r0
 fea:	90 1d       	adc	r25, r0
 fec:	08 95       	ret

00000fee <_exit>:
 fee:	f8 94       	cli

00000ff0 <__stop_program>:
 ff0:	ff cf       	rjmp	.-2      	; 0xff0 <__stop_program>
