
P9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800200  00000852  000008e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a1  0080022a  0080022a  00000910  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000170e  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e60  00000000  00000000  000021a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a95  00000000  00000000  00003006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000440  00000000  00000000  00003a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000786  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f32  00000000  00000000  00004662  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00005594  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	aa c0       	rjmp	.+340    	; 0x1b2 <__vector_23>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	18 c2       	rjmp	.+1072   	; 0x496 <__vector_25>
  66:	00 00       	nop
  68:	f6 c2       	rjmp	.+1516   	; 0x656 <__vector_26>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3a c2       	rjmp	.+1140   	; 0x506 <__vector_36>
  92:	00 00       	nop
  94:	12 c3       	rjmp	.+1572   	; 0x6ba <__vector_37>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	54 c2       	rjmp	.+1192   	; 0x576 <__vector_51>
  ce:	00 00       	nop
  d0:	26 c3       	rjmp	.+1612   	; 0x71e <__vector_52>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	86 c2       	rjmp	.+1292   	; 0x5e6 <__vector_54>
  da:	00 00       	nop
  dc:	52 c3       	rjmp	.+1700   	; 0x782 <__vector_55>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e5       	ldi	r30, 0x52	; 82
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 32       	cpi	r26, 0x2A	; 42
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	24 e0       	ldi	r18, 0x04	; 4
 110:	aa e2       	ldi	r26, 0x2A	; 42
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 3c       	cpi	r26, 0xCB	; 203
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	96 c3       	rjmp	.+1836   	; 0x84e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
//void UART0_AutoBaudRate(void);
int main(){
	/* llamar a función para inicializar puertos E/S */
	/* llamar a función para inicializar UART0 */

	UART_AutoBaudRate();
 124:	60 d3       	rcall	.+1728   	; 0x7e6 <UART_AutoBaudRate>
	UART_clrscr(0);
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	34 d1       	rcall	.+616    	; 0x392 <UART_clrscr>
	UART_gotoxy(0,5,1);
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	65 e0       	ldi	r22, 0x05	; 5
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	75 d1       	rcall	.+746    	; 0x41c <UART_gotoxy>
	UART_puts(0,"Autobauding done. UBRR0=");
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	72 e0       	ldi	r23, 0x02	; 2
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	1a d1       	rcall	.+564    	; 0x36e <UART_puts>
	itoa(UBRR0,cad,10);
 13a:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 13e:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 142:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <cad>
 146:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <cad+0x1>
 14a:	4a e0       	ldi	r20, 0x0A	; 10
 14c:	26 d1       	rcall	.+588    	; 0x39a <itoa>
	UART_puts(0,cad);
 14e:	60 91 35 02 	lds	r22, 0x0235	; 0x800235 <cad>
 152:	70 91 36 02 	lds	r23, 0x0236	; 0x800236 <cad+0x1>
 156:	80 e0       	ldi	r24, 0x00	; 0
	UART_puts(0,'\n\r');
 158:	0a d1       	rcall	.+532    	; 0x36e <UART_puts>
 15a:	6d e0       	ldi	r22, 0x0D	; 13
 15c:	7a e0       	ldi	r23, 0x0A	; 10
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	06 d1       	rcall	.+524    	; 0x36e <UART_puts>

	Timer0_Ini(); /* Inicializar contador de millis.*/
 162:	0f d0       	rcall	.+30     	; 0x182 <Timer0_Ini>
	//Clock_Ini(1583049590000);

	while(1)
	{ /* == main loop == */
		if( Timer0_SecFlag() ){ /* ¿ha pasado un Segundo? */
 164:	1e d0       	rcall	.+60     	; 0x1a2 <Timer0_SecFlag>
 166:	88 23       	and	r24, r24
 168:	e9 f3       	breq	.-6      	; 0x164 <main+0x40>
			UART_gotoxy(0,5,2);
 16a:	42 e0       	ldi	r20, 0x02	; 2
 16c:	65 e0       	ldi	r22, 0x05	; 5
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	55 d1       	rcall	.+682    	; 0x41c <UART_gotoxy>
			UART_putchar(0,'x');
 172:	68 e7       	ldi	r22, 0x78	; 120
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	79 d0       	rcall	.+242    	; 0x26a <UART_putchar>
 178:	43 e0       	ldi	r20, 0x03	; 3
			//Clock_Display();
			UART_gotoxy(0,5,3);
 17a:	65 e0       	ldi	r22, 0x05	; 5
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	4e d1       	rcall	.+668    	; 0x41c <UART_gotoxy>
 180:	f1 cf       	rjmp	.-30     	; 0x164 <main+0x40>

00000182 <Timer0_Ini>:
static volatile uint8_t SecFlag;
static volatile uint64_t ms;

void Timer0_Ini ( void ){
	
	TCNT0 = 0;
 182:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<WGM01);
 184:	84 b5       	in	r24, 0x24	; 36
 186:	82 60       	ori	r24, 0x02	; 2
 188:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS00) | (1<<CS01);
 18a:	85 b5       	in	r24, 0x25	; 37
 18c:	83 60       	ori	r24, 0x03	; 3
 18e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);
 190:	ee e6       	ldi	r30, 0x6E	; 110
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	82 60       	ori	r24, 0x02	; 2
 198:	80 83       	st	Z, r24
	OCR0A = 249;
 19a:	89 ef       	ldi	r24, 0xF9	; 249
 19c:	87 bd       	out	0x27, r24	; 39
	
	sei(); /* habilita interrupciones (global) */
 19e:	78 94       	sei
 1a0:	08 95       	ret

000001a2 <Timer0_SecFlag>:
}
uint8_t Timer0_SecFlag ( void ){
	if( SecFlag ){
 1a2:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <SecFlag>
 1a6:	88 23       	and	r24, r24
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <Timer0_SecFlag+0xe>
		SecFlag=0;
 1aa:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <SecFlag>
		return 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return 0;
	}
}
 1b0:	08 95       	ret

000001b2 <__vector_23>:

ISR (TIMER0_OVF_vect){ /* TIMER0_OVF_vect */
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	0b b6       	in	r0, 0x3b	; 59
 1be:	0f 92       	push	r0
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	static uint16_t mSecCnt;
	TCNT0+=0x06; /* reinicializar Timer0 sin perder conteo */
 1d6:	86 b5       	in	r24, 0x26	; 38
 1d8:	8a 5f       	subi	r24, 0xFA	; 250
 1da:	86 bd       	out	0x26, r24	; 38
	mSecCnt++; /* Incrementa contador de milisegundos */
 1dc:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <__data_end>
 1e0:	f0 91 2b 02 	lds	r31, 0x022B	; 0x80022b <__data_end+0x1>
 1e4:	31 96       	adiw	r30, 0x01	; 1
 1e6:	f0 93 2b 02 	sts	0x022B, r31	; 0x80022b <__data_end+0x1>
 1ea:	e0 93 2a 02 	sts	0x022A, r30	; 0x80022a <__data_end>
	ms++;
 1ee:	20 91 2c 02 	lds	r18, 0x022C	; 0x80022c <ms>
 1f2:	30 91 2d 02 	lds	r19, 0x022D	; 0x80022d <ms+0x1>
 1f6:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <ms+0x2>
 1fa:	50 91 2f 02 	lds	r21, 0x022F	; 0x80022f <ms+0x3>
 1fe:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <ms+0x4>
 202:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <ms+0x5>
 206:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <ms+0x6>
 20a:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <ms+0x7>
 20e:	a1 e0       	ldi	r26, 0x01	; 1
 210:	12 d3       	rcall	.+1572   	; 0x836 <__adddi3_s8>
 212:	20 93 2c 02 	sts	0x022C, r18	; 0x80022c <ms>
 216:	30 93 2d 02 	sts	0x022D, r19	; 0x80022d <ms+0x1>
 21a:	40 93 2e 02 	sts	0x022E, r20	; 0x80022e <ms+0x2>
 21e:	50 93 2f 02 	sts	0x022F, r21	; 0x80022f <ms+0x3>
 222:	60 93 30 02 	sts	0x0230, r22	; 0x800230 <ms+0x4>
 226:	70 93 31 02 	sts	0x0231, r23	; 0x800231 <ms+0x5>
 22a:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <ms+0x6>
 22e:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <ms+0x7>
	if( mSecCnt==1000 ){
 232:	e8 3e       	cpi	r30, 0xE8	; 232
 234:	f3 40       	sbci	r31, 0x03	; 3
 236:	39 f4       	brne	.+14     	; 0x246 <__vector_23+0x94>
		mSecCnt=0;
 238:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__data_end+0x1>
 23c:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__data_end>
		SecFlag=1; /* Bandera de Segundos */
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <SecFlag>
	}
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	af 91       	pop	r26
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	7f 91       	pop	r23
 252:	6f 91       	pop	r22
 254:	5f 91       	pop	r21
 256:	4f 91       	pop	r20
 258:	3f 91       	pop	r19
 25a:	2f 91       	pop	r18
 25c:	0f 90       	pop	r0
 25e:	0b be       	out	0x3b, r0	; 59
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <UART_putchar>:
		(*str)-=48;
		aux+=(*str);
		str++;
	}
	return aux;
}
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	31 f1       	breq	.+76     	; 0x2ba <UART_putchar+0x50>
 26e:	38 f0       	brcs	.+14     	; 0x27e <UART_putchar+0x14>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	09 f4       	brne	.+2      	; 0x276 <UART_putchar+0xc>
 274:	40 c0       	rjmp	.+128    	; 0x2f6 <UART_putchar+0x8c>
 276:	83 30       	cpi	r24, 0x03	; 3
 278:	09 f4       	brne	.+2      	; 0x27c <UART_putchar+0x12>
 27a:	5b c0       	rjmp	.+182    	; 0x332 <UART_putchar+0xc8>
 27c:	08 95       	ret
 27e:	a7 e7       	ldi	r26, 0x77	; 119
 280:	b2 e0       	ldi	r27, 0x02	; 2
 282:	e8 e7       	ldi	r30, 0x78	; 120
 284:	f2 e0       	ldi	r31, 0x02	; 2
 286:	2c 91       	ld	r18, X
 288:	80 81       	ld	r24, Z
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	8f 73       	andi	r24, 0x3F	; 63
 292:	99 27       	eor	r25, r25
 294:	28 17       	cp	r18, r24
 296:	39 07       	cpc	r19, r25
 298:	b1 f3       	breq	.-20     	; 0x286 <UART_putchar+0x1c>
 29a:	a7 e7       	ldi	r26, 0x77	; 119
 29c:	b2 e0       	ldi	r27, 0x02	; 2
 29e:	ec 91       	ld	r30, X
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	8e 0f       	add	r24, r30
 2a4:	8c 93       	st	X, r24
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	e9 5c       	subi	r30, 0xC9	; 201
 2aa:	fd 4f       	sbci	r31, 0xFD	; 253
 2ac:	60 83       	st	Z, r22
 2ae:	e1 ec       	ldi	r30, 0xC1	; 193
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	80 62       	ori	r24, 0x20	; 32
 2b6:	80 83       	st	Z, r24
 2b8:	08 95       	ret
 2ba:	af e7       	ldi	r26, 0x7F	; 127
 2bc:	b3 e0       	ldi	r27, 0x03	; 3
 2be:	e0 e8       	ldi	r30, 0x80	; 128
 2c0:	f3 e0       	ldi	r31, 0x03	; 3
 2c2:	2c 91       	ld	r18, X
 2c4:	80 81       	ld	r24, Z
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	8f 73       	andi	r24, 0x3F	; 63
 2ce:	99 27       	eor	r25, r25
 2d0:	28 17       	cp	r18, r24
 2d2:	39 07       	cpc	r19, r25
 2d4:	b1 f3       	breq	.-20     	; 0x2c2 <UART_putchar+0x58>
 2d6:	af e7       	ldi	r26, 0x7F	; 127
 2d8:	b3 e0       	ldi	r27, 0x03	; 3
 2da:	ec 91       	ld	r30, X
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	8e 0f       	add	r24, r30
 2e0:	8c 93       	st	X, r24
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	e1 5c       	subi	r30, 0xC1	; 193
 2e6:	fc 4f       	sbci	r31, 0xFC	; 252
 2e8:	60 83       	st	Z, r22
 2ea:	e9 ec       	ldi	r30, 0xC9	; 201
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	80 62       	ori	r24, 0x20	; 32
 2f2:	80 83       	st	Z, r24
 2f4:	08 95       	ret
 2f6:	a7 e8       	ldi	r26, 0x87	; 135
 2f8:	b4 e0       	ldi	r27, 0x04	; 4
 2fa:	e8 e8       	ldi	r30, 0x88	; 136
 2fc:	f4 e0       	ldi	r31, 0x04	; 4
 2fe:	2c 91       	ld	r18, X
 300:	80 81       	ld	r24, Z
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	8f 73       	andi	r24, 0x3F	; 63
 30a:	99 27       	eor	r25, r25
 30c:	28 17       	cp	r18, r24
 30e:	39 07       	cpc	r19, r25
 310:	b1 f3       	breq	.-20     	; 0x2fe <UART_putchar+0x94>
 312:	a7 e8       	ldi	r26, 0x87	; 135
 314:	b4 e0       	ldi	r27, 0x04	; 4
 316:	ec 91       	ld	r30, X
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	8e 0f       	add	r24, r30
 31c:	8c 93       	st	X, r24
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	e9 5b       	subi	r30, 0xB9	; 185
 322:	fb 4f       	sbci	r31, 0xFB	; 251
 324:	60 83       	st	Z, r22
 326:	e1 ed       	ldi	r30, 0xD1	; 209
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	80 62       	ori	r24, 0x20	; 32
 32e:	80 83       	st	Z, r24
 330:	08 95       	ret
 332:	ab ef       	ldi	r26, 0xFB	; 251
 334:	b2 e0       	ldi	r27, 0x02	; 2
 336:	ec ef       	ldi	r30, 0xFC	; 252
 338:	f2 e0       	ldi	r31, 0x02	; 2
 33a:	2c 91       	ld	r18, X
 33c:	80 81       	ld	r24, Z
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	01 97       	sbiw	r24, 0x01	; 1
 344:	8f 73       	andi	r24, 0x3F	; 63
 346:	99 27       	eor	r25, r25
 348:	28 17       	cp	r18, r24
 34a:	39 07       	cpc	r19, r25
 34c:	b1 f3       	breq	.-20     	; 0x33a <UART_putchar+0xd0>
 34e:	ab ef       	ldi	r26, 0xFB	; 251
 350:	b2 e0       	ldi	r27, 0x02	; 2
 352:	ec 91       	ld	r30, X
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	8e 0f       	add	r24, r30
 358:	8c 93       	st	X, r24
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	e5 54       	subi	r30, 0x45	; 69
 35e:	fd 4f       	sbci	r31, 0xFD	; 253
 360:	60 83       	st	Z, r22
 362:	e1 e3       	ldi	r30, 0x31	; 49
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	80 81       	ld	r24, Z
 368:	80 62       	ori	r24, 0x20	; 32
 36a:	80 83       	st	Z, r24
 36c:	08 95       	ret

0000036e <UART_puts>:
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	eb 01       	movw	r28, r22
 376:	68 81       	ld	r22, Y
 378:	66 23       	and	r22, r22
 37a:	39 f0       	breq	.+14     	; 0x38a <UART_puts+0x1c>
 37c:	18 2f       	mov	r17, r24
 37e:	21 96       	adiw	r28, 0x01	; 1
 380:	81 2f       	mov	r24, r17
 382:	73 df       	rcall	.-282    	; 0x26a <UART_putchar>
 384:	69 91       	ld	r22, Y+
 386:	61 11       	cpse	r22, r1
 388:	fb cf       	rjmp	.-10     	; 0x380 <UART_puts+0x12>
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	08 95       	ret

00000392 <UART_clrscr>:
 392:	69 e1       	ldi	r22, 0x19	; 25
 394:	72 e0       	ldi	r23, 0x02	; 2
 396:	eb cf       	rjmp	.-42     	; 0x36e <UART_puts>
 398:	08 95       	ret

0000039a <itoa>:
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
 3a4:	fb 01       	movw	r30, r22
 3a6:	89 2b       	or	r24, r25
 3a8:	21 f4       	brne	.+8      	; 0x3b2 <itoa+0x18>
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	80 83       	st	Z, r24
 3ae:	11 82       	std	Z+1, r1	; 0x01
 3b0:	30 c0       	rjmp	.+96     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	04 2f       	mov	r16, r20
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <itoa+0x22>
 3ba:	23 2f       	mov	r18, r19
 3bc:	ce 01       	movw	r24, r28
 3be:	b8 01       	movw	r22, r16
 3c0:	26 d2       	rcall	.+1100   	; 0x80e <__udivmodhi4>
 3c2:	bc 01       	movw	r22, r24
 3c4:	0a 97       	sbiw	r24, 0x0a	; 10
 3c6:	10 f0       	brcs	.+4      	; 0x3cc <itoa+0x32>
 3c8:	69 5f       	subi	r22, 0xF9	; 249
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255
 3cc:	31 e0       	ldi	r19, 0x01	; 1
 3ce:	32 0f       	add	r19, r18
 3d0:	60 5d       	subi	r22, 0xD0	; 208
 3d2:	7f 4f       	sbci	r23, 0xFF	; 255
 3d4:	df 01       	movw	r26, r30
 3d6:	a2 0f       	add	r26, r18
 3d8:	b1 1d       	adc	r27, r1
 3da:	6c 93       	st	X, r22
 3dc:	ce 01       	movw	r24, r28
 3de:	b8 01       	movw	r22, r16
 3e0:	16 d2       	rcall	.+1068   	; 0x80e <__udivmodhi4>
 3e2:	eb 01       	movw	r28, r22
 3e4:	df 01       	movw	r26, r30
 3e6:	a3 0f       	add	r26, r19
 3e8:	b1 1d       	adc	r27, r1
 3ea:	1c 92       	st	X, r1
 3ec:	20 97       	sbiw	r28, 0x00	; 0
 3ee:	29 f7       	brne	.-54     	; 0x3ba <itoa+0x20>
 3f0:	22 23       	and	r18, r18
 3f2:	79 f0       	breq	.+30     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	ef 01       	movw	r28, r30
 3f8:	c8 0f       	add	r28, r24
 3fa:	d1 1d       	adc	r29, r1
 3fc:	98 81       	ld	r25, Y
 3fe:	df 01       	movw	r26, r30
 400:	a2 0f       	add	r26, r18
 402:	b1 1d       	adc	r27, r1
 404:	3c 91       	ld	r19, X
 406:	38 83       	st	Y, r19
 408:	9c 93       	st	X, r25
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	82 17       	cp	r24, r18
 410:	90 f3       	brcs	.-28     	; 0x3f6 <itoa+0x5c>
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	08 95       	ret

0000041c <UART_gotoxy>:
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	60 97       	sbiw	r28, 0x10	; 16
 42a:	0f b6       	in	r0, 0x3f	; 63
 42c:	f8 94       	cli
 42e:	de bf       	out	0x3e, r29	; 62
 430:	0f be       	out	0x3f, r0	; 63
 432:	cd bf       	out	0x3d, r28	; 61
 434:	18 2f       	mov	r17, r24
 436:	86 2f       	mov	r24, r22
 438:	04 2f       	mov	r16, r20
 43a:	4a e0       	ldi	r20, 0x0A	; 10
 43c:	be 01       	movw	r22, r28
 43e:	6f 5f       	subi	r22, 0xFF	; 255
 440:	7f 4f       	sbci	r23, 0xFF	; 255
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	aa df       	rcall	.-172    	; 0x39a <itoa>
 446:	4a e0       	ldi	r20, 0x0A	; 10
 448:	be 01       	movw	r22, r28
 44a:	67 5f       	subi	r22, 0xF7	; 247
 44c:	7f 4f       	sbci	r23, 0xFF	; 255
 44e:	80 2f       	mov	r24, r16
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	a3 df       	rcall	.-186    	; 0x39a <itoa>
 454:	6e e1       	ldi	r22, 0x1E	; 30
 456:	72 e0       	ldi	r23, 0x02	; 2
 458:	81 2f       	mov	r24, r17
 45a:	89 df       	rcall	.-238    	; 0x36e <UART_puts>
 45c:	be 01       	movw	r22, r28
 45e:	67 5f       	subi	r22, 0xF7	; 247
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	81 2f       	mov	r24, r17
 464:	84 df       	rcall	.-248    	; 0x36e <UART_puts>
 466:	66 e2       	ldi	r22, 0x26	; 38
 468:	72 e0       	ldi	r23, 0x02	; 2
 46a:	81 2f       	mov	r24, r17
 46c:	80 df       	rcall	.-256    	; 0x36e <UART_puts>
 46e:	be 01       	movw	r22, r28
 470:	6f 5f       	subi	r22, 0xFF	; 255
 472:	7f 4f       	sbci	r23, 0xFF	; 255
 474:	81 2f       	mov	r24, r17
 476:	7b df       	rcall	.-266    	; 0x36e <UART_puts>
 478:	68 e2       	ldi	r22, 0x28	; 40
 47a:	72 e0       	ldi	r23, 0x02	; 2
 47c:	81 2f       	mov	r24, r17
 47e:	77 df       	rcall	.-274    	; 0x36e <UART_puts>
 480:	60 96       	adiw	r28, 0x10	; 16
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	f8 94       	cli
 486:	de bf       	out	0x3e, r29	; 62
 488:	0f be       	out	0x3f, r0	; 63
 48a:	cd bf       	out	0x3d, r28	; 61
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	08 95       	ret

00000496 <__vector_25>:

// ISRs
//ISR( USARTx_RX_vect )
ISR( USART0_RX_vect ){ //Rutina de servicio de interrupciï¿½n para el evento de recepciï¿½n completa. Esta rutina inserta a la cola circular el dato que fue recibido por el UARTx.
 496:	1f 92       	push	r1
 498:	0f 92       	push	r0
 49a:	0f b6       	in	r0, 0x3f	; 63
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	0b b6       	in	r0, 0x3b	; 59
 4a2:	0f 92       	push	r0
 4a4:	2f 93       	push	r18
 4a6:	3f 93       	push	r19
 4a8:	8f 93       	push	r24
 4aa:	9f 93       	push	r25
 4ac:	af 93       	push	r26
 4ae:	bf 93       	push	r27
 4b0:	ef 93       	push	r30
 4b2:	ff 93       	push	r31
	while(IF_BUFFER_FULL(buffer_rx0));
 4b4:	ad e3       	ldi	r26, 0x3D	; 61
 4b6:	b3 e0       	ldi	r27, 0x03	; 3
 4b8:	ee e3       	ldi	r30, 0x3E	; 62
 4ba:	f3 e0       	ldi	r31, 0x03	; 3
 4bc:	2c 91       	ld	r18, X
 4be:	80 81       	ld	r24, Z
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	8f 73       	andi	r24, 0x3F	; 63
 4c8:	99 27       	eor	r25, r25
 4ca:	28 17       	cp	r18, r24
 4cc:	39 07       	cpc	r19, r25
 4ce:	b1 f3       	breq	.-20     	; 0x4bc <__vector_25+0x26>
	
	buffer_rx0.buffer[buffer_rx0.in_idx++] = UDR0;
 4d0:	ad e3       	ldi	r26, 0x3D	; 61
 4d2:	b3 e0       	ldi	r27, 0x03	; 3
 4d4:	ec 91       	ld	r30, X
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	8e 0f       	add	r24, r30
 4da:	8c 93       	st	X, r24
 4dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	e3 50       	subi	r30, 0x03	; 3
 4e4:	fd 4f       	sbci	r31, 0xFD	; 253
 4e6:	80 83       	st	Z, r24
}
 4e8:	ff 91       	pop	r31
 4ea:	ef 91       	pop	r30
 4ec:	bf 91       	pop	r27
 4ee:	af 91       	pop	r26
 4f0:	9f 91       	pop	r25
 4f2:	8f 91       	pop	r24
 4f4:	3f 91       	pop	r19
 4f6:	2f 91       	pop	r18
 4f8:	0f 90       	pop	r0
 4fa:	0b be       	out	0x3b, r0	; 59
 4fc:	0f 90       	pop	r0
 4fe:	0f be       	out	0x3f, r0	; 63
 500:	0f 90       	pop	r0
 502:	1f 90       	pop	r1
 504:	18 95       	reti

00000506 <__vector_36>:

ISR( USART1_RX_vect ){
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	0b b6       	in	r0, 0x3b	; 59
 512:	0f 92       	push	r0
 514:	2f 93       	push	r18
 516:	3f 93       	push	r19
 518:	8f 93       	push	r24
 51a:	9f 93       	push	r25
 51c:	af 93       	push	r26
 51e:	bf 93       	push	r27
 520:	ef 93       	push	r30
 522:	ff 93       	push	r31
	while(IF_BUFFER_FULL(buffer_rx1));
 524:	a3 e0       	ldi	r26, 0x03	; 3
 526:	b4 e0       	ldi	r27, 0x04	; 4
 528:	e4 e0       	ldi	r30, 0x04	; 4
 52a:	f4 e0       	ldi	r31, 0x04	; 4
 52c:	2c 91       	ld	r18, X
 52e:	80 81       	ld	r24, Z
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	8f 73       	andi	r24, 0x3F	; 63
 538:	99 27       	eor	r25, r25
 53a:	28 17       	cp	r18, r24
 53c:	39 07       	cpc	r19, r25
 53e:	b1 f3       	breq	.-20     	; 0x52c <__vector_36+0x26>
	
	buffer_rx1.buffer[buffer_rx1.in_idx++] = UDR1;
 540:	a3 e0       	ldi	r26, 0x03	; 3
 542:	b4 e0       	ldi	r27, 0x04	; 4
 544:	ec 91       	ld	r30, X
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	8e 0f       	add	r24, r30
 54a:	8c 93       	st	X, r24
 54c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	ed 53       	subi	r30, 0x3D	; 61
 554:	fc 4f       	sbci	r31, 0xFC	; 252
 556:	80 83       	st	Z, r24
}
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	3f 91       	pop	r19
 566:	2f 91       	pop	r18
 568:	0f 90       	pop	r0
 56a:	0b be       	out	0x3b, r0	; 59
 56c:	0f 90       	pop	r0
 56e:	0f be       	out	0x3f, r0	; 63
 570:	0f 90       	pop	r0
 572:	1f 90       	pop	r1
 574:	18 95       	reti

00000576 <__vector_51>:

ISR( USART2_RX_vect ){
 576:	1f 92       	push	r1
 578:	0f 92       	push	r0
 57a:	0f b6       	in	r0, 0x3f	; 63
 57c:	0f 92       	push	r0
 57e:	11 24       	eor	r1, r1
 580:	0b b6       	in	r0, 0x3b	; 59
 582:	0f 92       	push	r0
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	while(IF_BUFFER_FULL(buffer_rx2));
 594:	a9 eb       	ldi	r26, 0xB9	; 185
 596:	b2 e0       	ldi	r27, 0x02	; 2
 598:	ea eb       	ldi	r30, 0xBA	; 186
 59a:	f2 e0       	ldi	r31, 0x02	; 2
 59c:	2c 91       	ld	r18, X
 59e:	80 81       	ld	r24, Z
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	8f 73       	andi	r24, 0x3F	; 63
 5a8:	99 27       	eor	r25, r25
 5aa:	28 17       	cp	r18, r24
 5ac:	39 07       	cpc	r19, r25
 5ae:	b1 f3       	breq	.-20     	; 0x59c <__vector_51+0x26>
	
	buffer_rx2.buffer[buffer_rx2.in_idx++] = UDR2;
 5b0:	a9 eb       	ldi	r26, 0xB9	; 185
 5b2:	b2 e0       	ldi	r27, 0x02	; 2
 5b4:	ec 91       	ld	r30, X
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	8e 0f       	add	r24, r30
 5ba:	8c 93       	st	X, r24
 5bc:	80 91 d6 00 	lds	r24, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	e7 58       	subi	r30, 0x87	; 135
 5c4:	fd 4f       	sbci	r31, 0xFD	; 253
 5c6:	80 83       	st	Z, r24
}
 5c8:	ff 91       	pop	r31
 5ca:	ef 91       	pop	r30
 5cc:	bf 91       	pop	r27
 5ce:	af 91       	pop	r26
 5d0:	9f 91       	pop	r25
 5d2:	8f 91       	pop	r24
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0b be       	out	0x3b, r0	; 59
 5dc:	0f 90       	pop	r0
 5de:	0f be       	out	0x3f, r0	; 63
 5e0:	0f 90       	pop	r0
 5e2:	1f 90       	pop	r1
 5e4:	18 95       	reti

000005e6 <__vector_54>:

ISR( USART3_RX_vect ){
 5e6:	1f 92       	push	r1
 5e8:	0f 92       	push	r0
 5ea:	0f b6       	in	r0, 0x3f	; 63
 5ec:	0f 92       	push	r0
 5ee:	11 24       	eor	r1, r1
 5f0:	0b b6       	in	r0, 0x3b	; 59
 5f2:	0f 92       	push	r0
 5f4:	2f 93       	push	r18
 5f6:	3f 93       	push	r19
 5f8:	8f 93       	push	r24
 5fa:	9f 93       	push	r25
 5fc:	af 93       	push	r26
 5fe:	bf 93       	push	r27
 600:	ef 93       	push	r30
 602:	ff 93       	push	r31
	while(IF_BUFFER_FULL(buffer_rx3));
 604:	a5 e4       	ldi	r26, 0x45	; 69
 606:	b4 e0       	ldi	r27, 0x04	; 4
 608:	e6 e4       	ldi	r30, 0x46	; 70
 60a:	f4 e0       	ldi	r31, 0x04	; 4
 60c:	2c 91       	ld	r18, X
 60e:	80 81       	ld	r24, Z
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	01 97       	sbiw	r24, 0x01	; 1
 616:	8f 73       	andi	r24, 0x3F	; 63
 618:	99 27       	eor	r25, r25
 61a:	28 17       	cp	r18, r24
 61c:	39 07       	cpc	r19, r25
 61e:	b1 f3       	breq	.-20     	; 0x60c <__vector_54+0x26>
	
	buffer_rx3.buffer[buffer_rx3.in_idx++] = UDR3;
 620:	a5 e4       	ldi	r26, 0x45	; 69
 622:	b4 e0       	ldi	r27, 0x04	; 4
 624:	ec 91       	ld	r30, X
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	8e 0f       	add	r24, r30
 62a:	8c 93       	st	X, r24
 62c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	eb 5f       	subi	r30, 0xFB	; 251
 634:	fb 4f       	sbci	r31, 0xFB	; 251
 636:	80 83       	st	Z, r24
}
 638:	ff 91       	pop	r31
 63a:	ef 91       	pop	r30
 63c:	bf 91       	pop	r27
 63e:	af 91       	pop	r26
 640:	9f 91       	pop	r25
 642:	8f 91       	pop	r24
 644:	3f 91       	pop	r19
 646:	2f 91       	pop	r18
 648:	0f 90       	pop	r0
 64a:	0b be       	out	0x3b, r0	; 59
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <__vector_26>:

//ISR( USARTx_UDRE_vect )
ISR( USART0_UDRE_vect ){
 656:	1f 92       	push	r1
 658:	0f 92       	push	r0
 65a:	0f b6       	in	r0, 0x3f	; 63
 65c:	0f 92       	push	r0
 65e:	11 24       	eor	r1, r1
 660:	0b b6       	in	r0, 0x3b	; 59
 662:	0f 92       	push	r0
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
 668:	af 93       	push	r26
 66a:	bf 93       	push	r27
 66c:	ef 93       	push	r30
 66e:	ff 93       	push	r31
	if(IF_BUFFER_EMPTY(buffer_tx0)){
 670:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <buffer_tx0+0x40>
 674:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <buffer_tx0+0x41>
 678:	98 13       	cpse	r25, r24
 67a:	06 c0       	rjmp	.+12     	; 0x688 <__vector_26+0x32>
		UCSR0B &= (~(1<<UDRIE0));
 67c:	e1 ec       	ldi	r30, 0xC1	; 193
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	8f 7d       	andi	r24, 0xDF	; 223
 684:	80 83       	st	Z, r24
 686:	0c c0       	rjmp	.+24     	; 0x6a0 <__vector_26+0x4a>
	}
	else{
		UDR0=buffer_tx0.buffer[buffer_tx0.out_idx++];
 688:	a8 e7       	ldi	r26, 0x78	; 120
 68a:	b2 e0       	ldi	r27, 0x02	; 2
 68c:	ec 91       	ld	r30, X
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	8e 0f       	add	r24, r30
 692:	8c 93       	st	X, r24
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	e9 5c       	subi	r30, 0xC9	; 201
 698:	fd 4f       	sbci	r31, 0xFD	; 253
 69a:	80 81       	ld	r24, Z
 69c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	}
}
 6a0:	ff 91       	pop	r31
 6a2:	ef 91       	pop	r30
 6a4:	bf 91       	pop	r27
 6a6:	af 91       	pop	r26
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	0f 90       	pop	r0
 6ae:	0b be       	out	0x3b, r0	; 59
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__vector_37>:

ISR( USART1_UDRE_vect ){
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	0b b6       	in	r0, 0x3b	; 59
 6c6:	0f 92       	push	r0
 6c8:	8f 93       	push	r24
 6ca:	9f 93       	push	r25
 6cc:	af 93       	push	r26
 6ce:	bf 93       	push	r27
 6d0:	ef 93       	push	r30
 6d2:	ff 93       	push	r31
	if(IF_BUFFER_EMPTY(buffer_tx1)){
 6d4:	90 91 7f 03 	lds	r25, 0x037F	; 0x80037f <buffer_tx1+0x40>
 6d8:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <buffer_tx1+0x41>
 6dc:	98 13       	cpse	r25, r24
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <__vector_37+0x32>
		UCSR1B &= (~(1<<UDRIE1));
 6e0:	e9 ec       	ldi	r30, 0xC9	; 201
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 81       	ld	r24, Z
 6e6:	8f 7d       	andi	r24, 0xDF	; 223
 6e8:	80 83       	st	Z, r24
 6ea:	0c c0       	rjmp	.+24     	; 0x704 <__vector_37+0x4a>
	}
	else{
		UDR1=buffer_tx1.buffer[buffer_tx1.out_idx++];
 6ec:	a0 e8       	ldi	r26, 0x80	; 128
 6ee:	b3 e0       	ldi	r27, 0x03	; 3
 6f0:	ec 91       	ld	r30, X
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	8e 0f       	add	r24, r30
 6f6:	8c 93       	st	X, r24
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	e1 5c       	subi	r30, 0xC1	; 193
 6fc:	fc 4f       	sbci	r31, 0xFC	; 252
 6fe:	80 81       	ld	r24, Z
 700:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	}
}
 704:	ff 91       	pop	r31
 706:	ef 91       	pop	r30
 708:	bf 91       	pop	r27
 70a:	af 91       	pop	r26
 70c:	9f 91       	pop	r25
 70e:	8f 91       	pop	r24
 710:	0f 90       	pop	r0
 712:	0b be       	out	0x3b, r0	; 59
 714:	0f 90       	pop	r0
 716:	0f be       	out	0x3f, r0	; 63
 718:	0f 90       	pop	r0
 71a:	1f 90       	pop	r1
 71c:	18 95       	reti

0000071e <__vector_52>:

ISR( USART2_UDRE_vect ){
 71e:	1f 92       	push	r1
 720:	0f 92       	push	r0
 722:	0f b6       	in	r0, 0x3f	; 63
 724:	0f 92       	push	r0
 726:	11 24       	eor	r1, r1
 728:	0b b6       	in	r0, 0x3b	; 59
 72a:	0f 92       	push	r0
 72c:	8f 93       	push	r24
 72e:	9f 93       	push	r25
 730:	af 93       	push	r26
 732:	bf 93       	push	r27
 734:	ef 93       	push	r30
 736:	ff 93       	push	r31
	if(IF_BUFFER_EMPTY(buffer_tx2)){
 738:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <buffer_tx2+0x40>
 73c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <buffer_tx2+0x41>
 740:	98 13       	cpse	r25, r24
 742:	06 c0       	rjmp	.+12     	; 0x750 <__vector_52+0x32>
		UCSR2B &= (~(1<<UDRIE2));
 744:	e1 ed       	ldi	r30, 0xD1	; 209
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	8f 7d       	andi	r24, 0xDF	; 223
 74c:	80 83       	st	Z, r24
 74e:	0c c0       	rjmp	.+24     	; 0x768 <__vector_52+0x4a>
	}
	else{
		UDR2=buffer_tx2.buffer[buffer_tx2.out_idx++];
 750:	a8 e8       	ldi	r26, 0x88	; 136
 752:	b4 e0       	ldi	r27, 0x04	; 4
 754:	ec 91       	ld	r30, X
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	8e 0f       	add	r24, r30
 75a:	8c 93       	st	X, r24
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	e9 5b       	subi	r30, 0xB9	; 185
 760:	fb 4f       	sbci	r31, 0xFB	; 251
 762:	80 81       	ld	r24, Z
 764:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
	}
}
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	bf 91       	pop	r27
 76e:	af 91       	pop	r26
 770:	9f 91       	pop	r25
 772:	8f 91       	pop	r24
 774:	0f 90       	pop	r0
 776:	0b be       	out	0x3b, r0	; 59
 778:	0f 90       	pop	r0
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	0f 90       	pop	r0
 77e:	1f 90       	pop	r1
 780:	18 95       	reti

00000782 <__vector_55>:

ISR( USART3_UDRE_vect ){
 782:	1f 92       	push	r1
 784:	0f 92       	push	r0
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	0f 92       	push	r0
 78a:	11 24       	eor	r1, r1
 78c:	0b b6       	in	r0, 0x3b	; 59
 78e:	0f 92       	push	r0
 790:	8f 93       	push	r24
 792:	9f 93       	push	r25
 794:	af 93       	push	r26
 796:	bf 93       	push	r27
 798:	ef 93       	push	r30
 79a:	ff 93       	push	r31
	if(IF_BUFFER_EMPTY(buffer_tx3)){
 79c:	90 91 fb 02 	lds	r25, 0x02FB	; 0x8002fb <buffer_tx3+0x40>
 7a0:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <buffer_tx3+0x41>
 7a4:	98 13       	cpse	r25, r24
 7a6:	06 c0       	rjmp	.+12     	; 0x7b4 <__vector_55+0x32>
		UCSR3B &= (~(1<<UDRIE3));
 7a8:	e1 e3       	ldi	r30, 0x31	; 49
 7aa:	f1 e0       	ldi	r31, 0x01	; 1
 7ac:	80 81       	ld	r24, Z
 7ae:	8f 7d       	andi	r24, 0xDF	; 223
 7b0:	80 83       	st	Z, r24
 7b2:	0c c0       	rjmp	.+24     	; 0x7cc <__vector_55+0x4a>
	}
	else{
		UDR3=buffer_tx3.buffer[buffer_tx3.out_idx++];
 7b4:	ac ef       	ldi	r26, 0xFC	; 252
 7b6:	b2 e0       	ldi	r27, 0x02	; 2
 7b8:	ec 91       	ld	r30, X
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	8e 0f       	add	r24, r30
 7be:	8c 93       	st	X, r24
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	e5 54       	subi	r30, 0x45	; 69
 7c4:	fd 4f       	sbci	r31, 0xFD	; 253
 7c6:	80 81       	ld	r24, Z
 7c8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	}
}
 7cc:	ff 91       	pop	r31
 7ce:	ef 91       	pop	r30
 7d0:	bf 91       	pop	r27
 7d2:	af 91       	pop	r26
 7d4:	9f 91       	pop	r25
 7d6:	8f 91       	pop	r24
 7d8:	0f 90       	pop	r0
 7da:	0b be       	out	0x3b, r0	; 59
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <UART_AutoBaudRate>:

void UART_AutoBaudRate(){
	DDRE = ~(1<<PE0);
 7e6:	8e ef       	ldi	r24, 0xFE	; 254
 7e8:	8d b9       	out	0x0d, r24	; 13
	TCCR0A = 0;
 7ea:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (2<<CS00);
 7ec:	85 b5       	in	r24, 0x25	; 37
 7ee:	82 60       	ori	r24, 0x02	; 2
 7f0:	85 bd       	out	0x25, r24	; 37

	while (PINE & 1<<PE0);
 7f2:	60 99       	sbic	0x0c, 0	; 12
 7f4:	fe cf       	rjmp	.-4      	; 0x7f2 <UART_AutoBaudRate+0xc>
	TCNT0 = 0;
 7f6:	16 bc       	out	0x26, r1	; 38
	
	while (!(PINE & 1<<PE0));
 7f8:	60 9b       	sbis	0x0c, 0	; 12
 7fa:	fe cf       	rjmp	.-4      	; 0x7f8 <UART_AutoBaudRate+0x12>
	TCCR0B =0;
 7fc:	15 bc       	out	0x25, r1	; 37
	UBRR0 = TCNT0-1;
 7fe:	86 b5       	in	r24, 0x26	; 38
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	01 97       	sbiw	r24, 0x01	; 1
 804:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 808:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 80c:	08 95       	ret

0000080e <__udivmodhi4>:
 80e:	aa 1b       	sub	r26, r26
 810:	bb 1b       	sub	r27, r27
 812:	51 e1       	ldi	r21, 0x11	; 17
 814:	07 c0       	rjmp	.+14     	; 0x824 <__udivmodhi4_ep>

00000816 <__udivmodhi4_loop>:
 816:	aa 1f       	adc	r26, r26
 818:	bb 1f       	adc	r27, r27
 81a:	a6 17       	cp	r26, r22
 81c:	b7 07       	cpc	r27, r23
 81e:	10 f0       	brcs	.+4      	; 0x824 <__udivmodhi4_ep>
 820:	a6 1b       	sub	r26, r22
 822:	b7 0b       	sbc	r27, r23

00000824 <__udivmodhi4_ep>:
 824:	88 1f       	adc	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	5a 95       	dec	r21
 82a:	a9 f7       	brne	.-22     	; 0x816 <__udivmodhi4_loop>
 82c:	80 95       	com	r24
 82e:	90 95       	com	r25
 830:	bc 01       	movw	r22, r24
 832:	cd 01       	movw	r24, r26
 834:	08 95       	ret

00000836 <__adddi3_s8>:
 836:	00 24       	eor	r0, r0
 838:	a7 fd       	sbrc	r26, 7
 83a:	00 94       	com	r0
 83c:	2a 0f       	add	r18, r26
 83e:	30 1d       	adc	r19, r0
 840:	40 1d       	adc	r20, r0
 842:	50 1d       	adc	r21, r0
 844:	60 1d       	adc	r22, r0
 846:	70 1d       	adc	r23, r0
 848:	80 1d       	adc	r24, r0
 84a:	90 1d       	adc	r25, r0
 84c:	08 95       	ret

0000084e <_exit>:
 84e:	f8 94       	cli

00000850 <__stop_program>:
 850:	ff cf       	rjmp	.-2      	; 0x850 <__stop_program>
