
Practica 7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800200  00800200  0000033c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7a  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c32  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000425  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000021c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d4  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000079  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000287d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a8 30       	cpi	r26, 0x08	; 8
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	b8 d0       	rcall	.+368    	; 0x276 <main>
 106:	de c0       	rjmp	.+444    	; 0x2c4 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <InitPorts>:

  while(ms--){
	  x=130;
	  while(x--);
  }
}
 10a:	80 e4       	ldi	r24, 0x40	; 64
 10c:	80 bb       	out	0x10, r24	; 16
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	81 bb       	out	0x11, r24	; 17
 112:	08 95       	ret

00000114 <updateLeds>:
 114:	81 b3       	in	r24, 0x11	; 17
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	81 bb       	out	0x11, r24	; 17
 11a:	80 b3       	in	r24, 0x10	; 16
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	80 bb       	out	0x10, r24	; 16
 120:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <led_num.1628>
 124:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <globalCounter>
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 2e       	mov	r0, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <updateLeds+0x1e>
 12e:	95 95       	asr	r25
 130:	87 95       	ror	r24
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <updateLeds+0x1a>
 136:	80 ff       	sbrs	r24, 0
 138:	38 c0       	rjmp	.+112    	; 0x1aa <updateLeds+0x96>
 13a:	22 30       	cpi	r18, 0x02	; 2
 13c:	58 f4       	brcc	.+22     	; 0x154 <updateLeds+0x40>
 13e:	80 b3       	in	r24, 0x10	; 16
 140:	83 60       	ori	r24, 0x03	; 3
 142:	80 bb       	out	0x10, r24	; 16
 144:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <led_num.1628>
 148:	81 11       	cpse	r24, r1
 14a:	02 c0       	rjmp	.+4      	; 0x150 <updateLeds+0x3c>
 14c:	89 9a       	sbi	0x11, 1	; 17
 14e:	2d c0       	rjmp	.+90     	; 0x1aa <updateLeds+0x96>
 150:	88 9a       	sbi	0x11, 0	; 17
 152:	2b c0       	rjmp	.+86     	; 0x1aa <updateLeds+0x96>
 154:	8e ef       	ldi	r24, 0xFE	; 254
 156:	82 0f       	add	r24, r18
 158:	82 30       	cpi	r24, 0x02	; 2
 15a:	58 f4       	brcc	.+22     	; 0x172 <updateLeds+0x5e>
 15c:	80 b3       	in	r24, 0x10	; 16
 15e:	86 60       	ori	r24, 0x06	; 6
 160:	80 bb       	out	0x10, r24	; 16
 162:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <led_num.1628>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	11 f4       	brne	.+4      	; 0x16e <updateLeds+0x5a>
 16a:	8a 9a       	sbi	0x11, 2	; 17
 16c:	1e c0       	rjmp	.+60     	; 0x1aa <updateLeds+0x96>
 16e:	89 9a       	sbi	0x11, 1	; 17
 170:	1c c0       	rjmp	.+56     	; 0x1aa <updateLeds+0x96>
 172:	8c ef       	ldi	r24, 0xFC	; 252
 174:	82 0f       	add	r24, r18
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	58 f4       	brcc	.+22     	; 0x190 <updateLeds+0x7c>
 17a:	80 b3       	in	r24, 0x10	; 16
 17c:	85 60       	ori	r24, 0x05	; 5
 17e:	80 bb       	out	0x10, r24	; 16
 180:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <led_num.1628>
 184:	84 30       	cpi	r24, 0x04	; 4
 186:	11 f4       	brne	.+4      	; 0x18c <updateLeds+0x78>
 188:	88 9a       	sbi	0x11, 0	; 17
 18a:	0f c0       	rjmp	.+30     	; 0x1aa <updateLeds+0x96>
 18c:	8a 9a       	sbi	0x11, 2	; 17
 18e:	0d c0       	rjmp	.+26     	; 0x1aa <updateLeds+0x96>
 190:	26 50       	subi	r18, 0x06	; 6
 192:	22 30       	cpi	r18, 0x02	; 2
 194:	50 f4       	brcc	.+20     	; 0x1aa <updateLeds+0x96>
 196:	80 b3       	in	r24, 0x10	; 16
 198:	8c 60       	ori	r24, 0x0C	; 12
 19a:	80 bb       	out	0x10, r24	; 16
 19c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <led_num.1628>
 1a0:	86 30       	cpi	r24, 0x06	; 6
 1a2:	11 f4       	brne	.+4      	; 0x1a8 <updateLeds+0x94>
 1a4:	8b 9a       	sbi	0x11, 3	; 17
 1a6:	01 c0       	rjmp	.+2      	; 0x1aa <updateLeds+0x96>
 1a8:	8a 9a       	sbi	0x11, 2	; 17
 1aa:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <led_num.1628>
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	87 70       	andi	r24, 0x07	; 7
 1b2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <led_num.1628>
 1b6:	08 95       	ret

000001b8 <checkBtn>:

uint8_t checkBtn(void){
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
	static uint8_t bandera = 0,aux;
	if(!(PINF&(1<<PF7)) && !bandera){
 1bc:	7f 99       	sbic	0x0f, 7	; 15
 1be:	0c c0       	rjmp	.+24     	; 0x1d8 <checkBtn+0x20>
 1c0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <bandera.1642>
 1c4:	81 11       	cpse	r24, r1
 1c6:	3c c0       	rjmp	.+120    	; 0x240 <checkBtn+0x88>
		aux=millis;
 1c8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <millis>
 1cc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		bandera=1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <bandera.1642>
 1d6:	34 c0       	rjmp	.+104    	; 0x240 <checkBtn+0x88>
	}
	if((aux+40) < millis && bandera)
 1d8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	00 91 04 02 	lds	r16, 0x0204	; 0x800204 <millis>
 1e2:	10 91 05 02 	lds	r17, 0x0205	; 0x800205 <millis+0x1>
 1e6:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <millis+0x2>
 1ea:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <millis+0x3>
 1ee:	ac 01       	movw	r20, r24
 1f0:	48 5d       	subi	r20, 0xD8	; 216
 1f2:	5f 4f       	sbci	r21, 0xFF	; 255
 1f4:	05 2e       	mov	r0, r21
 1f6:	00 0c       	add	r0, r0
 1f8:	66 0b       	sbc	r22, r22
 1fa:	77 0b       	sbc	r23, r23
 1fc:	40 17       	cp	r20, r16
 1fe:	51 07       	cpc	r21, r17
 200:	62 07       	cpc	r22, r18
 202:	73 07       	cpc	r23, r19
 204:	a8 f4       	brcc	.+42     	; 0x230 <checkBtn+0x78>
 206:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <bandera.1642>
 20a:	44 23       	and	r20, r20
 20c:	99 f0       	breq	.+38     	; 0x234 <checkBtn+0x7c>
	if((PINF&(1<<PF7))){
 20e:	7f 9b       	sbis	0x0f, 7	; 15
 210:	13 c0       	rjmp	.+38     	; 0x238 <checkBtn+0x80>
		bandera=0;
 212:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <bandera.1642>
		if((aux+1000)> millis)
 216:	88 51       	subi	r24, 0x18	; 24
 218:	9c 4f       	sbci	r25, 0xFC	; 252
 21a:	09 2e       	mov	r0, r25
 21c:	00 0c       	add	r0, r0
 21e:	aa 0b       	sbc	r26, r26
 220:	bb 0b       	sbc	r27, r27
 222:	08 17       	cp	r16, r24
 224:	19 07       	cpc	r17, r25
 226:	2a 07       	cpc	r18, r26
 228:	3b 07       	cpc	r19, r27
 22a:	40 f0       	brcs	.+16     	; 0x23c <checkBtn+0x84>
		return  1;
		else
		return  2;
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	20 c0       	rjmp	.+64     	; 0x270 <checkBtn+0xb8>
	}
	
	return  1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	1e c0       	rjmp	.+60     	; 0x270 <checkBtn+0xb8>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	1c c0       	rjmp	.+56     	; 0x270 <checkBtn+0xb8>
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	1a c0       	rjmp	.+52     	; 0x270 <checkBtn+0xb8>
	}
	if((aux+40) < millis && bandera)
	if((PINF&(1<<PF7))){
		bandera=0;
		if((aux+1000)> millis)
		return  1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	18 c0       	rjmp	.+48     	; 0x270 <checkBtn+0xb8>
	static uint8_t bandera = 0,aux;
	if(!(PINF&(1<<PF7)) && !bandera){
		aux=millis;
		bandera=1;
	}
	if((aux+40) < millis && bandera)
 240:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	00 91 04 02 	lds	r16, 0x0204	; 0x800204 <millis>
 24a:	10 91 05 02 	lds	r17, 0x0205	; 0x800205 <millis+0x1>
 24e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <millis+0x2>
 252:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <millis+0x3>
 256:	ac 01       	movw	r20, r24
 258:	48 5d       	subi	r20, 0xD8	; 216
 25a:	5f 4f       	sbci	r21, 0xFF	; 255
 25c:	05 2e       	mov	r0, r21
 25e:	00 0c       	add	r0, r0
 260:	66 0b       	sbc	r22, r22
 262:	77 0b       	sbc	r23, r23
 264:	40 17       	cp	r20, r16
 266:	51 07       	cpc	r21, r17
 268:	62 07       	cpc	r22, r18
 26a:	73 07       	cpc	r23, r19
 26c:	80 f2       	brcs	.-96     	; 0x20e <checkBtn+0x56>
		return  1;
		else
		return  2;
	}
	
	return  1;
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <main>:
uint8_t  globalCounter=0;
uint32_t millis;


int main(void){
	InitPorts();
 276:	49 df       	rcall	.-366    	; 0x10a <InitPorts>

	while(1){
		switch(checkBtn()){
 278:	9f df       	rcall	.-194    	; 0x1b8 <checkBtn>
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	19 f0       	breq	.+6      	; 0x284 <main+0xe>
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	39 f0       	breq	.+14     	; 0x290 <main+0x1a>
 282:	0b c0       	rjmp	.+22     	; 0x29a <main+0x24>
 284:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <globalCounter>
			case eBtnShortPressed: 
				globalCounter++;
 288:	8f 5f       	subi	r24, 0xFF	; 255
 28a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <globalCounter>
 28e:	05 c0       	rjmp	.+10     	; 0x29a <main+0x24>
			break;
 290:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <globalCounter>
			case eBtnLongPressed:
				globalCounter--;
 294:	81 50       	subi	r24, 0x01	; 1
 296:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <globalCounter>
 29a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <millis>
			break;
		}
		
		delay(1);
		millis++;
 29e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <millis+0x1>
 2a2:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <millis+0x2>
 2a6:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <millis+0x3>
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	a1 1d       	adc	r26, r1
 2ae:	b1 1d       	adc	r27, r1
 2b0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <millis>
 2b4:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <millis+0x1>
 2b8:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <millis+0x2>
 2bc:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <millis+0x3>
		updateLeds();
 2c0:	29 df       	rcall	.-430    	; 0x114 <updateLeds>
 2c2:	da cf       	rjmp	.-76     	; 0x278 <main+0x2>

000002c4 <_exit>:
	}
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
