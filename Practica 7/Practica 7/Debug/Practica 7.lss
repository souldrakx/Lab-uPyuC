
Practica 7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000002b8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800202  00800202  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7a  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c23  00000000  00000000  0000117a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041e  00000000  00000000  00001d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e0  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004a  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000284a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 eb       	ldi	r30, 0xB8	; 184
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 30       	cpi	r26, 0x0C	; 12
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	a3 d0       	rcall	.+326    	; 0x266 <main>
 120:	c9 c0       	rjmp	.+402    	; 0x2b4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <InitPorts>:

  while(ms--){
	  x=130;
	  while(x--);
  }
}
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	80 bb       	out	0x10, r24	; 16
 128:	80 e8       	ldi	r24, 0x80	; 128
 12a:	81 bb       	out	0x11, r24	; 17
 12c:	00 00       	nop
 12e:	08 95       	ret

00000130 <updateLeds>:
 130:	81 b3       	in	r24, 0x11	; 17
 132:	80 7f       	andi	r24, 0xF0	; 240
 134:	81 bb       	out	0x11, r24	; 17
 136:	80 b3       	in	r24, 0x10	; 16
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	80 bb       	out	0x10, r24	; 16
 13c:	00 00       	nop
 13e:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <led_num.1628>
 142:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <globalCounter>
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 2e       	mov	r0, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <updateLeds+0x20>
 14c:	95 95       	asr	r25
 14e:	87 95       	ror	r24
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <updateLeds+0x1c>
 154:	80 ff       	sbrs	r24, 0
 156:	38 c0       	rjmp	.+112    	; 0x1c8 <updateLeds+0x98>
 158:	22 30       	cpi	r18, 0x02	; 2
 15a:	58 f4       	brcc	.+22     	; 0x172 <updateLeds+0x42>
 15c:	80 b3       	in	r24, 0x10	; 16
 15e:	83 60       	ori	r24, 0x03	; 3
 160:	80 bb       	out	0x10, r24	; 16
 162:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <led_num.1628>
 166:	81 11       	cpse	r24, r1
 168:	02 c0       	rjmp	.+4      	; 0x16e <updateLeds+0x3e>
 16a:	89 9a       	sbi	0x11, 1	; 17
 16c:	2d c0       	rjmp	.+90     	; 0x1c8 <updateLeds+0x98>
 16e:	88 9a       	sbi	0x11, 0	; 17
 170:	2b c0       	rjmp	.+86     	; 0x1c8 <updateLeds+0x98>
 172:	8e ef       	ldi	r24, 0xFE	; 254
 174:	82 0f       	add	r24, r18
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	58 f4       	brcc	.+22     	; 0x190 <updateLeds+0x60>
 17a:	80 b3       	in	r24, 0x10	; 16
 17c:	86 60       	ori	r24, 0x06	; 6
 17e:	80 bb       	out	0x10, r24	; 16
 180:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <led_num.1628>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	11 f4       	brne	.+4      	; 0x18c <updateLeds+0x5c>
 188:	8a 9a       	sbi	0x11, 2	; 17
 18a:	1e c0       	rjmp	.+60     	; 0x1c8 <updateLeds+0x98>
 18c:	89 9a       	sbi	0x11, 1	; 17
 18e:	1c c0       	rjmp	.+56     	; 0x1c8 <updateLeds+0x98>
 190:	8c ef       	ldi	r24, 0xFC	; 252
 192:	82 0f       	add	r24, r18
 194:	82 30       	cpi	r24, 0x02	; 2
 196:	58 f4       	brcc	.+22     	; 0x1ae <updateLeds+0x7e>
 198:	80 b3       	in	r24, 0x10	; 16
 19a:	85 60       	ori	r24, 0x05	; 5
 19c:	80 bb       	out	0x10, r24	; 16
 19e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <led_num.1628>
 1a2:	84 30       	cpi	r24, 0x04	; 4
 1a4:	11 f4       	brne	.+4      	; 0x1aa <updateLeds+0x7a>
 1a6:	88 9a       	sbi	0x11, 0	; 17
 1a8:	0f c0       	rjmp	.+30     	; 0x1c8 <updateLeds+0x98>
 1aa:	8a 9a       	sbi	0x11, 2	; 17
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <updateLeds+0x98>
 1ae:	26 50       	subi	r18, 0x06	; 6
 1b0:	22 30       	cpi	r18, 0x02	; 2
 1b2:	50 f4       	brcc	.+20     	; 0x1c8 <updateLeds+0x98>
 1b4:	80 b3       	in	r24, 0x10	; 16
 1b6:	8c 60       	ori	r24, 0x0C	; 12
 1b8:	80 bb       	out	0x10, r24	; 16
 1ba:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <led_num.1628>
 1be:	86 30       	cpi	r24, 0x06	; 6
 1c0:	11 f4       	brne	.+4      	; 0x1c6 <updateLeds+0x96>
 1c2:	8b 9a       	sbi	0x11, 3	; 17
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <updateLeds+0x98>
 1c6:	8a 9a       	sbi	0x11, 2	; 17
 1c8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <led_num.1628>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	87 70       	andi	r24, 0x07	; 7
 1d0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <led_num.1628>
 1d4:	08 95       	ret

000001d6 <checkBtn>:

uint8_t checkBtn(){
	static uint32_t hit_time = 0;
	static uint8_t prev_state = 1;

  if ( bit_is_clear(PINF,PF7) ) {
 1d6:	7f 99       	sbic	0x0f, 7	; 15
 1d8:	19 c0       	rjmp	.+50     	; 0x20c <checkBtn+0x36>
		
		if(prev_state){
 1da:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1de:	88 23       	and	r24, r24
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <checkBtn+0xe>
 1e2:	40 c0       	rjmp	.+128    	; 0x264 <checkBtn+0x8e>
			prev_state = 0;
 1e4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
			hit_time = millis;
 1e8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <millis>
 1ec:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <millis+0x1>
 1f0:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <millis+0x2>
 1f4:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <millis+0x3>
 1f8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 1fc:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 200:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <__data_end+0x2>
 204:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <__data_end+0x3>
		
		}
	    
  }
	
  return 0;
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret
			hit_time = millis;
		}

  }
  else{
  		if( (millis - hit_time) > 100 && prev_state == 0){
 20c:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <millis>
 210:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <millis+0x1>
 214:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <millis+0x2>
 218:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <millis+0x3>
 21c:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <__data_end>
 220:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <__data_end+0x1>
 224:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <__data_end+0x2>
 228:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <__data_end+0x3>
 22c:	84 1b       	sub	r24, r20
 22e:	95 0b       	sbc	r25, r21
 230:	a6 0b       	sbc	r26, r22
 232:	b7 0b       	sbc	r27, r23
 234:	85 36       	cpi	r24, 0x65	; 101
 236:	91 05       	cpc	r25, r1
 238:	a1 05       	cpc	r26, r1
 23a:	b1 05       	cpc	r27, r1
 23c:	70 f0       	brcs	.+28     	; 0x25a <checkBtn+0x84>
 23e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 242:	21 11       	cpse	r18, r1
 244:	0c c0       	rjmp	.+24     	; 0x25e <checkBtn+0x88>
				
			prev_state=1;
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>

				if((millis - hit_time) > 999){ 
 24c:	88 3e       	cpi	r24, 0xE8	; 232
 24e:	93 40       	sbci	r25, 0x03	; 3
 250:	a1 05       	cpc	r26, r1
 252:	b1 05       	cpc	r27, r1
 254:	30 f4       	brcc	.+12     	; 0x262 <checkBtn+0x8c>
				return 2;
				}
				else {
				return 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	08 95       	ret
		
		}
	    
  }
	
  return 0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	08 95       	ret
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	08 95       	ret
  		if( (millis - hit_time) > 100 && prev_state == 0){
				
			prev_state=1;

				if((millis - hit_time) > 999){ 
				return 2;
 262:	82 e0       	ldi	r24, 0x02	; 2
		}
	    
  }
	
  return 0;
}
 264:	08 95       	ret

00000266 <main>:
uint8_t  globalCounter=0;
uint32_t millis;


int main(void){
	InitPorts();
 266:	5e df       	rcall	.-324    	; 0x124 <InitPorts>

	while(1){
		switch(checkBtn()){
 268:	b6 df       	rcall	.-148    	; 0x1d6 <checkBtn>
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	19 f0       	breq	.+6      	; 0x274 <main+0xe>
 26e:	82 30       	cpi	r24, 0x02	; 2
 270:	39 f0       	breq	.+14     	; 0x280 <main+0x1a>
 272:	0b c0       	rjmp	.+22     	; 0x28a <main+0x24>
 274:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <globalCounter>
			case eBtnShortPressed: 
				globalCounter++;
 278:	8f 5f       	subi	r24, 0xFF	; 255
 27a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <globalCounter>
 27e:	05 c0       	rjmp	.+10     	; 0x28a <main+0x24>
			break;
 280:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <globalCounter>
			case eBtnLongPressed:
				globalCounter--;
 284:	81 50       	subi	r24, 0x01	; 1
 286:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <globalCounter>
 28a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <millis>
			break;
		}
		
		delay(1);
		millis++;
 28e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <millis+0x1>
 292:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <millis+0x2>
 296:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <millis+0x3>
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	a1 1d       	adc	r26, r1
 29e:	b1 1d       	adc	r27, r1
 2a0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <millis>
 2a4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <millis+0x1>
 2a8:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <millis+0x2>
 2ac:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <millis+0x3>
		updateLeds();
 2b0:	3f df       	rcall	.-386    	; 0x130 <updateLeds>
 2b2:	da cf       	rjmp	.-76     	; 0x268 <main+0x2>

000002b4 <_exit>:
	}
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
